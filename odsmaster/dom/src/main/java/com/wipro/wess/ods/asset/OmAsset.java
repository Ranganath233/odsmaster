package com.wipro.wess.ods.asset;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.masterconfig.MAssetclass;
import com.wipro.wess.ods.organisation.MOrganisation;
import com.wipro.wess.ods.organisation.OrganisationService;
import com.wipro.wess.ods.reporting.OmLocationHierarchy;
import com.wipro.wess.ods.reporting.OmLocationHierarchyService;

/**
 * OmAsset generated by hbm2java
 */
@Named("Asset")
@Bookmarkable
@Audited
@ObjectType("OmAsset")
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_asset", objectIdClass = OmAssetPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_OmAsset_by_pk", language = "JDOQL", value = "SELECT "
                + " OmAsset FROM com.wipro.wess.ods.asset.OmAsset OmAsset "
                + " WHERE assetUid == :assetUid && organisation == :organisation"),
        @javax.jdo.annotations.Query(name = "fetch_assets_by_user", language = "JPQL", value = "SELECT asset FROM com.wipro.wess.ods.asset.OmAsset asset "
                + " JOIN asset.omLocationHierarchy loc_hcy "
                + " JOIN loc_hcy.omSite site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) "),
        @javax.jdo.annotations.Query(name = "fetch_assets_by_type_and_user", language = "JPQL", value = "SELECT asset FROM com.wipro.wess.ods.asset.OmAsset asset "
                + " JOIN asset.omLocationHierarchy loc_hcy "
                + " JOIN loc_hcy.omSite site WHERE type = :type AND EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
public class OmAsset implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 7798829415495004297L;

    private String assetUid;

    private MOrganisation organisation;

    private MAssetclass MAssetclass;

    private OmLocationHierarchy omLocationHierarchy;

    private int rowseqId;

    private String description;

    private String type;

    private String subtype;

    private String status;

    private Date installdate;

    private String vendor;

    private String manufacturer;

    private String model;

    private String physicalLocation;

    private String serviceGroup;

    private String serviceSubtype;

    private OmAsset parentAssetUid;

    private String rootAssetUid;

    private Long sourceId;

    private String changeby;

    private Date changedate;

    private Long loadbatch;

    private Date loaddate;

    private String subtypeLvl2;

    private String serialNum;

    private String ipAddress;

    private Date yearPurchased;

    private String meterType;

    private String parentMeter;

    private String assetTag;

    private String configUser;

    // private Set<OmDiPointpathMapping> omDiPointpathMappings = new HashSet<OmDiPointpathMapping>(0);

    // private OmMeterConfig omMeterConfig;

    // private Set<OmAssetExtendedAttr> omAssetExtendedAttrs = new HashSet<OmAssetExtendedAttr>();

    public OmAsset() {
    }

    public OmAsset(OmLocationHierarchy omLocationHierarchy, int rowseqId) {
        this.omLocationHierarchy = omLocationHierarchy;
        this.rowseqId = rowseqId;
    }

    public OmAsset(MAssetclass MAssetclass, OmLocationHierarchy omLocationHierarchy, int rowseqId, String description,
            String type, String subtype, String status, Date installdate, String vendor, String manufacturer,
            String model, String physicalLocation, String serviceGroup, String serviceSubtype, OmAsset parentAssetUid,
            String rootAssetUid, Long sourceId, String changeby, Date changedate, Long loadbatch, Date loaddate,
            String subtypeLvl2/* , Set<OmDiPointpathMapping> omDiPointpathMappings */) {
        this.MAssetclass = MAssetclass;
        this.omLocationHierarchy = omLocationHierarchy;
        this.rowseqId = rowseqId;
        this.description = description;
        this.type = type;
        this.subtype = subtype;
        this.status = status;
        this.installdate = installdate;
        this.vendor = vendor;
        this.manufacturer = manufacturer;
        this.model = model;
        this.physicalLocation = physicalLocation;
        this.serviceGroup = serviceGroup;
        this.serviceSubtype = serviceSubtype;
        this.parentAssetUid = parentAssetUid;
        this.rootAssetUid = rootAssetUid;
        this.sourceId = sourceId;
        this.changeby = changeby;
        this.changedate = changedate;
        this.loadbatch = loadbatch;
        this.loaddate = loaddate;
        this.subtypeLvl2 = subtypeLvl2;
        // this.omDiPointpathMappings = omDiPointpathMappings;
    }

    @Persistent(primaryKey = "true")
    @Column(allowsNull = "false", name = "asset_uid")
    @Title
    public String getAssetUid() {
        return assetUid;
    }

    public void setAssetUid(String assetUid) {
        this.assetUid = assetUid;
    }

    @Persistent(primaryKey = "true", dependent = "false")
    @Column(allowsNull = "false", name = "org_id")
    @Title
    public MOrganisation getOrganisation() {
        return organisation;
    }

    public void setOrganisation(MOrganisation organisation) {
        this.organisation = organisation;
    }

    @Column(name = "assetclass_code")
    public MAssetclass getMAssetclass() {
        return this.MAssetclass;
    }

    public void setMAssetclass(MAssetclass MAssetclass) {
        this.MAssetclass = MAssetclass;
    }

    @Columns({ @Column(name = "loc_org_id", target = "org_id"), @Column(name = "location_uid", target = "location_uid") })
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public OmLocationHierarchy getOmLocationHierarchy() {
        return this.omLocationHierarchy;
    }

    public void setOmLocationHierarchy(OmLocationHierarchy omLocationHierarchy) {
        this.omLocationHierarchy = omLocationHierarchy;
    }

    @Column(allowsNull = "false", name = "rowseq_id")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.OBJECT_FORMS)
    public int getRowseqId() {
        return this.rowseqId;
    }

    public void setRowseqId(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    @Column(name = "description")
    @Hidden(where = Where.ALL_TABLES)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "type")
    @Hidden(where = Where.ALL_TABLES)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Column(name = "subtype")
    @Hidden(where = Where.ALL_TABLES)
    public String getSubtype() {
        return this.subtype;
    }

    public void setSubtype(String subtype) {
        this.subtype = subtype;
    }

    @Column(name = "status")
    @Hidden(where = Where.ALL_TABLES)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "installdate")
    @Hidden(where = Where.ALL_TABLES)
    public Date getInstalldate() {
        return this.installdate;
    }

    public void setInstalldate(Date installdate) {
        this.installdate = installdate;
    }

    @Column(name = "vendor")
    @Hidden(where = Where.ALL_TABLES)
    public String getVendor() {
        return this.vendor;
    }

    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    @Column(name = "manufacturer")
    @Hidden(where = Where.ALL_TABLES)
    public String getManufacturer() {
        return this.manufacturer;
    }

    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    @Column(name = "model")
    @Hidden(where = Where.ALL_TABLES)
    public String getModel() {
        return this.model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    @Column(name = "physical_location")
    @Hidden(where = Where.ALL_TABLES)
    public String getPhysicalLocation() {
        return this.physicalLocation;
    }

    public void setPhysicalLocation(String physicalLocation) {
        this.physicalLocation = physicalLocation;
    }

    @Column(name = "service_group")
    @Hidden(where = Where.ALL_TABLES)
    public String getServiceGroup() {
        return this.serviceGroup;
    }

    public void setServiceGroup(String serviceGroup) {
        this.serviceGroup = serviceGroup;
    }

    @Column(name = "service_subtype")
    @Hidden(where = Where.ALL_TABLES)
    public String getServiceSubtype() {
        return this.serviceSubtype;
    }

    public void setServiceSubtype(String serviceSubtype) {
        this.serviceSubtype = serviceSubtype;
    }

    // @Columns(value = {@Column(name = "parent_asset_uid"), @Column(name = "parent_asset_org_id")})
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    @Column(name = "parent_asset_uid")
    public OmAsset getParentAssetUid() {
        return this.parentAssetUid;
    }

    public void setParentAssetUid(OmAsset parentAssetUid) {
        this.parentAssetUid = parentAssetUid;
    }

    @Column(name = "root_asset_uid")
    @Hidden(where = Where.ALL_TABLES)
    public String getRootAssetUid() {
        return this.rootAssetUid;
    }

    public void setRootAssetUid(String rootAssetUid) {
        this.rootAssetUid = rootAssetUid;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "changeby")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeby() {
        return this.changeby;
    }

    public void setChangeby(String changeby) {
        this.changeby = changeby;
    }

    @Column(name = "changedate")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangedate() {
        return this.changedate;
    }

    public void setChangedate(Date changedate) {
        this.changedate = changedate;
    }

    @Column(name = "loadbatch")
    @Hidden(where = Where.ALL_TABLES)
    public Long getLoadbatch() {
        return this.loadbatch;
    }

    public void setLoadbatch(Long loadbatch) {
        this.loadbatch = loadbatch;
    }

    @Column(name = "loaddate")
    @Hidden(where = Where.ALL_TABLES)
    public Date getLoaddate() {
        return this.loaddate;
    }

    public void setLoaddate(Date loaddate) {
        this.loaddate = loaddate;
    }

    @Column(name = "subtype_lvl2")
    @Hidden(where = Where.ALL_TABLES)
    public String getSubtypeLvl2() {
        return this.subtypeLvl2;
    }

    public void setSubtypeLvl2(String subtypeLvl2) {
        this.subtypeLvl2 = subtypeLvl2;
    }

    @Column(name = "serial_num")
    @Hidden(where = Where.ALL_TABLES)
    public String getSerialNum() {
        return serialNum;
    }

    public void setSerialNum(String serialNum) {
        this.serialNum = serialNum;
    }

    @Column(name = "ip_address")
    @Hidden(where = Where.ALL_TABLES)
    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    @Column(name = "year_purchased")
    @Hidden(where = Where.ALL_TABLES)
    public Date getYearPurchased() {
        return yearPurchased;
    }

    public void setYearPurchased(Date yearPurchased) {
        this.yearPurchased = yearPurchased;
    }

    @Column(name = "meter_type")
    @Hidden(where = Where.ALL_TABLES)
    public String getMeterType() {
        return meterType;
    }

    public void setMeterType(String meterType) {
        this.meterType = meterType;
    }

    @Column(name = "parent_meter")
    @Hidden(where = Where.ALL_TABLES)
    public String getParentMeter() {
        return parentMeter;
    }

    public void setParentMeter(String parentMeter) {
        this.parentMeter = parentMeter;
    }

    @Column(name = "assettag")
    @Hidden(where = Where.ALL_TABLES)
    public String getAssetTag() {
        return assetTag;
    }

    public void setAssetTag(String assetTag) {
        this.assetTag = assetTag;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((assetUid == null) ? 0 : assetUid.hashCode());
        result = prime * result + ((organisation == null) ? 0 : organisation.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmAsset other = (OmAsset) obj;
        if (assetUid == null) {
            if (other.assetUid != null)
                return false;
        } else if (!assetUid.equals(other.assetUid))
            return false;
        if (organisation == null) {
            if (other.organisation != null)
                return false;
        } else if (!organisation.equals(other.organisation))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    private OrganisationService orgService;

    public void injectOrganisationService(final OrganisationService orgService) {
        this.orgService = orgService;
    }

    public List<MOrganisation> choicesOrganisation() {
        return this.orgService.listAllOrganisations();
    }

    public List<MAssetclass> choicesMAssetclass() {
        return this.container.allInstances(MAssetclass.class);
    }

    OmLocationHierarchyService locationHierarchyService;

    public void injectOmLocationHierarchyService(OmLocationHierarchyService locationHierarchyService) {
        this.locationHierarchyService = locationHierarchyService;
    }

    public List<OmLocationHierarchy> choicesOmLocationHierarchy() {
        return this.locationHierarchyService.listAll();
    }

    public List<OmAsset> choicesParentAssetUid() {
        List<OmAsset> parentAssets = this.assetService.listAllAssets();
        if (parentAssets != null && !parentAssets.isEmpty()) {
            parentAssets.remove(this);
        }
        return parentAssets;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    /*
     * @Persistent(mappedBy = "assetId", dependentElement = "true") public Set<OmAssetExtendedAttr>
     * getOmAssetExtendedAttrs() { return omAssetExtendedAttrs; } public void
     * setOmAssetExtendedAttrs(Set<OmAssetExtendedAttr> omAssetExtendedAttrs) { this.omAssetExtendedAttrs =
     * omAssetExtendedAttrs; }
     */

    /*
     * public Set<OmDiPointpathMapping> getOmDiPointpathMappings() { return this.omDiPointpathMappings; } public void
     * setOmDiPointpathMappings(Set<OmDiPointpathMapping> omDiPointpathMappings) { this.omDiPointpathMappings =
     * omDiPointpathMappings; }
     */

    /*
     * @Persistent(mappedBy = "omAsset", dependentElement = "true") public OmMeterConfig getOmMeterConfig() { return
     * omMeterConfig; } public void setOmMeterConfig(OmMeterConfig omMeterConfig) { this.omMeterConfig = omMeterConfig;
     * }
     */

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeby(this.container.getUser().getName());
        this.setChangedate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private OmAssetService assetService;

    public void injectOmAssetService(OmAssetService assetService) {
        this.assetService = assetService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmAsset> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.assetService.listAllAssets();

    }
}
