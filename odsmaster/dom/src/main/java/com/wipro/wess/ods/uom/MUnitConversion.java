package com.wipro.wess.ods.uom;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.munit.MUnit;
import com.wipro.wess.ods.munit.MUnitFamily;

/**
 * MUnitConversion generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_unit_conversion", objectIdClass = MUnitConversionPK.class, identityType = IdentityType.APPLICATION)
@Audited
@Bookmarkable
@ObjectType("MUnitConversion")
public class MUnitConversion implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = -1070769409163024852L;

    private MUnitFamily unitFamilyId;

    private MUnit fromUnitId;

    private MUnit toUnitId;

    private BigDecimal convFactor;

    private Long sourceId;

    private Date changeDate;

    private int recordId;

    private BigDecimal offsetValue;

    private String conversionType;

    private String conversionFormula;

    private String configUser;

    public MUnitConversion() {
    }

    public MUnitConversion(BigDecimal convFactor, Date changeDate, int recordId, BigDecimal offsetValue,
            String conversionType) {
        this.convFactor = convFactor;
        this.changeDate = changeDate;
        this.recordId = recordId;
        this.offsetValue = offsetValue;
        this.conversionType = conversionType;
    }

    public MUnitConversion(BigDecimal convFactor, Long sourceId, Date changeDate, int recordId, BigDecimal offsetValue,
            String conversionType, String conversionFormula) {
        this.convFactor = convFactor;
        this.sourceId = sourceId;
        this.changeDate = changeDate;
        this.recordId = recordId;
        this.offsetValue = offsetValue;
        this.conversionType = conversionType;
        this.conversionFormula = conversionFormula;
    }

    @Column(name = "unit_family_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MUnitFamily getUnitFamilyId() {
        return unitFamilyId;
    }

    public void setUnitFamilyId(MUnitFamily unitFamilyId) {
        this.unitFamilyId = unitFamilyId;
    }

    @Column(name = "from_unit_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MUnit getFromUnitId() {
        return fromUnitId;
    }

    public void setFromUnitId(MUnit fromUnitId) {
        this.fromUnitId = fromUnitId;
    }

    @Column(name = "to_unit_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MUnit getToUnitId() {
        return toUnitId;
    }

    public void setToUnitId(MUnit toUnitId) {
        this.toUnitId = toUnitId;
    }

    @Column(name = "conv_factor", allowsNull = "false")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getConvFactor() {
        return this.convFactor;
    }

    public void setConvFactor(BigDecimal convFactor) {
        this.convFactor = convFactor;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "change_date", allowsNull = "false")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDate() {
        return this.changeDate;
    }

    public void setChangeDate(Date changeDate) {
        this.changeDate = changeDate;
    }

    @Column(name = "record_id", allowsNull = "false")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.OBJECT_FORMS)
    public int getRecordId() {
        return this.recordId;
    }

    public void setRecordId(int recordId) {
        this.recordId = recordId;
    }

    @Column(name = "offset_value", allowsNull = "false")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getOffsetValue() {
        return this.offsetValue;
    }

    public void setOffsetValue(BigDecimal offsetValue) {
        this.offsetValue = offsetValue;
    }

    @Column(name = "conversion_type", allowsNull = "false")
    @Hidden(where = Where.ALL_TABLES)
    public String getConversionType() {
        return this.conversionType;
    }

    public void setConversionType(String conversionType) {
        this.conversionType = conversionType;
    }

    @Column(name = "conversion_formula")
    @Hidden(where = Where.ALL_TABLES)
    public String getConversionFormula() {
        return this.conversionFormula;
    }

    public void setConversionFormula(String conversionFormula) {
        this.conversionFormula = conversionFormula;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public List<MUnitFamily> choicesUnitFamilyId() {
        return this.container.allInstances(MUnitFamily.class);
    }

    public List<MUnit> choicesFromUnitId() {
        return this.container.allInstances(MUnit.class);
    }

    public List<MUnit> choicesToUnitId() {
        return this.container.allInstances(MUnit.class);
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeDate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private UOMMeasurementService measurementService;

    public void injectUOMMeasurementService(UOMMeasurementService measurementService) {
        this.measurementService = measurementService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<MUnitConversion> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.measurementService.listAllMeasurementUnitConversion();

    }
}
