package com.wipro.wess.ods.asset;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.Date;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Mandatory;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.site.OmSite;

/**
 * OmAssetExtendedAttr generated by hbm2java
 */
@Named("AssetExtendedAttr")
@Bookmarkable
@Audited
@ObjectType("OmAssetExtendedAttr")
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_asset_extended_attr", objectIdClass = AssetExtendedAttrPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name = "fetch_OmAssetExtendedAttr_by_pk", language = "JDOQL", value = "SELECT "
        + " OmAssetExtendedAttr FROM com.wipro.wess.ods.asset.OmAssetExtendedAttr OmAssetExtendedAttr WHERE assetId.assetUid == :assetId && site == :site && paramName == :paramName") })
public class OmAssetExtendedAttr implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 2009050471010729736L;

    private OmAsset assetId;

    private OmSite site;

    private String paramName;

    private int recordId;

    private String alnValue;

    private String changeBy;

    private Date changeDt;

    private BigDecimal numValue;
    
    private String configUser;

    public OmAssetExtendedAttr() {
    }

    public OmAssetExtendedAttr(int recordId, String alnValue, String changeBy, Date changeDt, BigDecimal numValue) {
        this.recordId = recordId;
        this.alnValue = alnValue;
        this.changeBy = changeBy;
        this.changeDt = changeDt;
        this.numValue = numValue;
    }

    @Column(allowsNull = "false", name = "asset_id")
    @Columns({ @Column(allowsNull = "false", name = "org_id"),
            @Column(allowsNull = "false", name = "asset_id", target = "asset_uid") })
    @Title
    @Persistent(primaryKey = "true")
    public OmAsset getAssetId() {
        return assetId;
    }

    public void setAssetId(OmAsset assetId) {
        this.assetId = assetId;
    }

    @Columns({ @Column(allowsNull = "false", name = "site_org_id", target = "org_id"),
            @Column(allowsNull = "false", name = "site_id") })
    @Title
    @Persistent(primaryKey = "true")
    @Mandatory
    public OmSite getSite() {
        return site;
    }

    public void setSite(OmSite site) {
        this.site = site;
    }

    @Column(allowsNull = "false", name = "param_name")
    @Title
    @Persistent(primaryKey = "true")
    public String getParamName() {
        return paramName;
    }

    public void setParamName(String paramName) {
        this.paramName = paramName;
    }

    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Column(name = "record_id")
    public int getRecordId() {
        return this.recordId;
    }

    public void setRecordId(int recordId) {
        this.recordId = recordId;
    }

    @Column(name = "aln_value")
    public String getAlnValue() {
        return this.alnValue;
    }

    public void setAlnValue(String alnValue) {
        this.alnValue = alnValue;
    }

    @Column(name = "change_by")
    public String getChangeBy() {
        return this.changeBy;
    }

    public void setChangeBy(String changeBy) {
        this.changeBy = changeBy;
    }

    @Column(name = "change_dt")
    public Date getChangeDt() {
        return this.changeDt;
    }

    public void setChangeDt(Date changeDt) {
        this.changeDt = changeDt;
    }

    @Column(name = "num_value")
    public BigDecimal getNumValue() {
        return this.numValue;
    }

    public void setNumValue(BigDecimal numValue) {
        this.numValue = numValue;
    }
    
    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((assetId == null) ? 0 : assetId.hashCode());
        result = prime * result + ((paramName == null) ? 0 : paramName.hashCode());
        result = prime * result + ((site == null) ? 0 : site.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmAssetExtendedAttr other = (OmAssetExtendedAttr) obj;
        if (assetId == null) {
            if (other.assetId != null)
                return false;
        } else if (!assetId.equals(other.assetId))
            return false;
        if (paramName == null) {
            if (other.paramName != null)
                return false;
        } else if (!paramName.equals(other.paramName))
            return false;
        if (site == null) {
            if (other.site != null)
                return false;
        } else if (!site.equals(other.site))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void process(OmAsset asset, OmSite site, String paramName, BigDecimal numValue) {
        this.setAssetId(asset);
        this.setSite(site);
        this.setParamName(paramName);
        this.setNumValue(numValue);
        container.persistIfNotAlready(this);
    }

    public void process(OmAsset asset, OmSite site, String paramName, String alnValue) {
        this.setAssetId(asset);
        this.setSite(site);
        this.setParamName(paramName);
        this.setAlnValue(alnValue);
        container.persistIfNotAlready(this);
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeBy(this.container.getUser().getName());
        this.setChangeDt(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

}
