package com.wipro.wess.ods.masterconfig;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

/**
 * MAssetclass generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_assetclass", objectIdClass = AssetClassPK.class, identityType = IdentityType.APPLICATION)
public class MAssetclass implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 8038972208999396845L;

    private String assetclassCode;

    private int rowseqId;

    private String assetclass;

    private String changeby;

    private Date changedt;

    private String configUser;

    /*
     * private Set<OmPointpathSurr> omPointpathSurrs = new HashSet<OmPointpathSurr>(0); private Set<MPointlist>
     * MPointlists = new HashSet<MPointlist>(0); private Set<OmPointpath> omPointpaths = new HashSet<OmPointpath>(0);
     * private Set<OmPointpathTest> omPointpathTests = new HashSet<OmPointpathTest>(0); private Set<OmAsset> omAssets =
     * new HashSet<OmAsset>(0);
     */

    public MAssetclass() {
    }

    public MAssetclass(String assetclassCode, int rowseqId, Date changedt) {
        this.assetclassCode = assetclassCode;
        this.rowseqId = rowseqId;
        this.changedt = changedt;
    }

    public MAssetclass(String assetclassCode, int rowseqId, String assetclass, String changeby, Date changedt/*
                                                                                                              * , Set<
                                                                                                              * OmPointpathSurr
                                                                                                              * >
                                                                                                              * omPointpathSurrs
                                                                                                              * , Set<
                                                                                                              * MPointlist
                                                                                                              * >
                                                                                                              * MPointlists
                                                                                                              * , Set<
                                                                                                              * OmPointpath
                                                                                                              * >
                                                                                                              * omPointpaths
                                                                                                              * , Set<
                                                                                                              * OmPointpathTest
                                                                                                              * >
                                                                                                              * omPointpathTests
                                                                                                              * ,
                                                                                                              * Set<OmAsset
                                                                                                              * >
                                                                                                              * omAssets
                                                                                                              */) {
        this.assetclassCode = assetclassCode;
        this.rowseqId = rowseqId;
        this.assetclass = assetclass;
        this.changeby = changeby;
        this.changedt = changedt;
        /*
         * this.omPointpathSurrs = omPointpathSurrs; this.MPointlists = MPointlists; this.omPointpaths = omPointpaths;
         * this.omPointpathTests = omPointpathTests; this.omAssets = omAssets;
         */
    }

    @Persistent(primaryKey = "true")
    @Column(allowsNull = "false", name = "assetclass_code")
    @Title
    public String getAssetclassCode() {
        return this.assetclassCode;
    }

    public void setAssetclassCode(String assetclassCode) {
        this.assetclassCode = assetclassCode;
    }

    @Column(allowsNull = "false", name = "rowseq_id")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.ANYWHERE)
    public int getRowseqId() {
        return this.rowseqId;
    }

    public void setRowseqId(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    @Column(name = "assetclass")
    public String getAssetclass() {
        return this.assetclass;
    }

    public void setAssetclass(String assetclass) {
        this.assetclass = assetclass;
    }

    @Column(name = "changeby")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeby() {
        return this.changeby;
    }

    public void setChangeby(String changeby) {
        this.changeby = changeby;
    }

    @Column(allowsNull = "false", name = "changedt")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangedt() {
        return this.changedt;
    }

    public void setChangedt(Date changedt) {
        this.changedt = changedt;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeby(this.container.getUser().getName());
        this.setChangedt(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    /*
     * public Set<OmPointpathSurr> getOmPointpathSurrs() { return this.omPointpathSurrs; } public void
     * setOmPointpathSurrs(Set<OmPointpathSurr> omPointpathSurrs) { this.omPointpathSurrs = omPointpathSurrs; } public
     * Set<MPointlist> getMPointlists() { return this.MPointlists; } public void setMPointlists(Set<MPointlist>
     * MPointlists) { this.MPointlists = MPointlists; } public Set<OmPointpath> getOmPointpaths() { return
     * this.omPointpaths; } public void setOmPointpaths(Set<OmPointpath> omPointpaths) { this.omPointpaths =
     * omPointpaths; } public Set<OmPointpathTest> getOmPointpathTests() { return this.omPointpathTests; } public void
     * setOmPointpathTests(Set<OmPointpathTest> omPointpathTests) { this.omPointpathTests = omPointpathTests; } public
     * Set<OmAsset> getOmAssets() { return this.omAssets; } public void setOmAssets(Set<OmAsset> omAssets) {
     * this.omAssets = omAssets; }
     */

    private MasterConfigurationService masterConfigurationService;

    public void injectMasterConfigurationService(MasterConfigurationService masterConfigurationService) {
        this.masterConfigurationService = masterConfigurationService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<MAssetclass> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.masterConfigurationService.listAllAssetclass();

    }

}
