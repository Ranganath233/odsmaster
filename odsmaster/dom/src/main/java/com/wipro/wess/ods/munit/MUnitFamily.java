package com.wipro.wess.ods.munit;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.uom.UOMMeasurementService;

/**
 * MUnitFamily generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_unit_family", objectIdClass = MUnitFamilyPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@Audited
@ObjectType("MUnitFamily")
@Bookmarkable
public class MUnitFamily implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 7925850124292417590L;

    private String unitFamilyId;

    private String defaultUnitId;

    private Long sourceId;

    private int recordId;

    private Date changeDate;
    
    private String configUser;

    /*
     * private Set<OmUomExtDataSourceExcept> omUomExtDataSourceExcepts = new HashSet<OmUomExtDataSourceExcept>(0);
     * private Set<OmUomCountryExcept> omUomCountryExcepts = new HashSet<OmUomCountryExcept>(0); private
     * Set<OmPointlistCountryExcept> omPointlistCountryExcepts = new HashSet<OmPointlistCountryExcept>(0); private
     * Set<OmPointlistSiteExcept> omPointlistSiteExcepts = new HashSet<OmPointlistSiteExcept>(0); private
     * Set<OmUomOrgPolicy> omUomOrgPolicies = new HashSet<OmUomOrgPolicy>(0); private Set<MMeasurement> MMeasurements =
     * new HashSet<MMeasurement>(0); private Set<OmSiteInfoElementAudit> omSiteInfoElementAudits = new
     * HashSet<OmSiteInfoElementAudit>(0); private Set<MPointlist> MPointlists = new HashSet<MPointlist>(0); private
     * Set<OmAssetInfoElement> omAssetInfoElements = new HashSet<OmAssetInfoElement>(0); private Set<OmSiteInfoElement>
     * omSiteInfoElements = new HashSet<OmSiteInfoElement>(0); private Set<MUomDefaults> MUomDefaultses = new
     * HashSet<MUomDefaults>(0); private Set<OmAssetInfoElementAudit> omAssetInfoElementAudits = new
     * HashSet<OmAssetInfoElementAudit>(0); private Set<OmUomSiteExcept> omUomSiteExcepts = new
     * HashSet<OmUomSiteExcept>(0); private Set<OmPointlistOrgPolicy> omPointlistOrgPolicies = new
     * HashSet<OmPointlistOrgPolicy>(0); private Set<MUnitConversion> MUnitConversions = new
     * HashSet<MUnitConversion>(0); private Set<OmOrgUnitMap> omOrgUnitMaps = new HashSet<OmOrgUnitMap>(0); private
     * Set<OmUomCountryPolicy> omUomCountryPolicies = new HashSet<OmUomCountryPolicy>(0); private Set<MUnit> MUnits =
     * new HashSet<MUnit>(0); private Set<OmPointlistCountryPolicy> omPointlistCountryPolicies = new
     * HashSet<OmPointlistCountryPolicy>(0);
     */
    public MUnitFamily() {
    }

    public MUnitFamily(String unitFamilyId, String defaultUnitId, int recordId, Date changeDate) {
        this.unitFamilyId = unitFamilyId;
        this.defaultUnitId = defaultUnitId;
        this.recordId = recordId;
        this.changeDate = changeDate;
    }

    public MUnitFamily(String unitFamilyId, String defaultUnitId, Long sourceId, int recordId, Date changeDate) {
        this.unitFamilyId = unitFamilyId;
        this.defaultUnitId = defaultUnitId;
        this.sourceId = sourceId;
        this.recordId = recordId;
        this.changeDate = changeDate;
    }

    @Column(allowsNull = "false", name = "unit_family_id")
    @Persistent(primaryKey = "true")
    @Title
    public String getUnitFamilyId() {
        return this.unitFamilyId;
    }

    public void setUnitFamilyId(String unitFamilyId) {
        this.unitFamilyId = unitFamilyId;
    }

    @Column(allowsNull = "false", name = "default_unit_id")
    public String getDefaultUnitId() {
        return this.defaultUnitId;
    }

    public void setDefaultUnitId(String defaultUnitId) {
        this.defaultUnitId = defaultUnitId;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(allowsNull = "false", name = "record_id")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.ANYWHERE)
    public int getRecordId() {
        return this.recordId;
    }

    public void setRecordId(int recordId) {
        this.recordId = recordId;
    }

    @Column(allowsNull = "false", name = "change_date")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDate() {
        return this.changeDate;
    }

    public void setChangeDate(Date changeDate) {
        this.changeDate = changeDate;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    /*
     * public Set<OmUomExtDataSourceExcept> getOmUomExtDataSourceExcepts() { return this.omUomExtDataSourceExcepts; }
     * public void setOmUomExtDataSourceExcepts(Set<OmUomExtDataSourceExcept> omUomExtDataSourceExcepts) {
     * this.omUomExtDataSourceExcepts = omUomExtDataSourceExcepts; } public Set<OmUomCountryExcept>
     * getOmUomCountryExcepts() { return this.omUomCountryExcepts; } public void
     * setOmUomCountryExcepts(Set<OmUomCountryExcept> omUomCountryExcepts) { this.omUomCountryExcepts =
     * omUomCountryExcepts; } public Set<OmPointlistCountryExcept> getOmPointlistCountryExcepts() { return
     * this.omPointlistCountryExcepts; } public void setOmPointlistCountryExcepts(Set<OmPointlistCountryExcept>
     * omPointlistCountryExcepts) { this.omPointlistCountryExcepts = omPointlistCountryExcepts; } public
     * Set<OmPointlistSiteExcept> getOmPointlistSiteExcepts() { return this.omPointlistSiteExcepts; } public void
     * setOmPointlistSiteExcepts(Set<OmPointlistSiteExcept> omPointlistSiteExcepts) { this.omPointlistSiteExcepts =
     * omPointlistSiteExcepts; } public Set<OmUomOrgPolicy> getOmUomOrgPolicies() { return this.omUomOrgPolicies; }
     * public void setOmUomOrgPolicies(Set<OmUomOrgPolicy> omUomOrgPolicies) { this.omUomOrgPolicies = omUomOrgPolicies;
     * } public Set<MMeasurement> getMMeasurements() { return this.MMeasurements; } public void
     * setMMeasurements(Set<MMeasurement> MMeasurements) { this.MMeasurements = MMeasurements; } public
     * Set<OmSiteInfoElementAudit> getOmSiteInfoElementAudits() { return this.omSiteInfoElementAudits; } public void
     * setOmSiteInfoElementAudits(Set<OmSiteInfoElementAudit> omSiteInfoElementAudits) { this.omSiteInfoElementAudits =
     * omSiteInfoElementAudits; } public Set<MPointlist> getMPointlists() { return this.MPointlists; } public void
     * setMPointlists(Set<MPointlist> MPointlists) { this.MPointlists = MPointlists; } public Set<OmAssetInfoElement>
     * getOmAssetInfoElements() { return this.omAssetInfoElements; } public void
     * setOmAssetInfoElements(Set<OmAssetInfoElement> omAssetInfoElements) { this.omAssetInfoElements =
     * omAssetInfoElements; } public Set<OmSiteInfoElement> getOmSiteInfoElements() { return this.omSiteInfoElements; }
     * public void setOmSiteInfoElements(Set<OmSiteInfoElement> omSiteInfoElements) { this.omSiteInfoElements =
     * omSiteInfoElements; } public Set<MUomDefaults> getMUomDefaultses() { return this.MUomDefaultses; } public void
     * setMUomDefaultses(Set<MUomDefaults> MUomDefaultses) { this.MUomDefaultses = MUomDefaultses; } public
     * Set<OmAssetInfoElementAudit> getOmAssetInfoElementAudits() { return this.omAssetInfoElementAudits; } public void
     * setOmAssetInfoElementAudits(Set<OmAssetInfoElementAudit> omAssetInfoElementAudits) {
     * this.omAssetInfoElementAudits = omAssetInfoElementAudits; } public Set<OmUomSiteExcept> getOmUomSiteExcepts() {
     * return this.omUomSiteExcepts; } public void setOmUomSiteExcepts(Set<OmUomSiteExcept> omUomSiteExcepts) {
     * this.omUomSiteExcepts = omUomSiteExcepts; } public Set<OmPointlistOrgPolicy> getOmPointlistOrgPolicies() { return
     * this.omPointlistOrgPolicies; } public void setOmPointlistOrgPolicies(Set<OmPointlistOrgPolicy>
     * omPointlistOrgPolicies) { this.omPointlistOrgPolicies = omPointlistOrgPolicies; } public Set<MUnitConversion>
     * getMUnitConversions() { return this.MUnitConversions; } public void setMUnitConversions(Set<MUnitConversion>
     * MUnitConversions) { this.MUnitConversions = MUnitConversions; } public Set<OmOrgUnitMap> getOmOrgUnitMaps() {
     * return this.omOrgUnitMaps; } public void setOmOrgUnitMaps(Set<OmOrgUnitMap> omOrgUnitMaps) { this.omOrgUnitMaps =
     * omOrgUnitMaps; } public Set<OmUomCountryPolicy> getOmUomCountryPolicies() { return this.omUomCountryPolicies; }
     * public void setOmUomCountryPolicies(Set<OmUomCountryPolicy> omUomCountryPolicies) { this.omUomCountryPolicies =
     * omUomCountryPolicies; } public Set<MUnit> getMUnits() { return this.MUnits; } public void setMUnits(Set<MUnit>
     * MUnits) { this.MUnits = MUnits; } public Set<OmPointlistCountryPolicy> getOmPointlistCountryPolicies() { return
     * this.omPointlistCountryPolicies; } public void setOmPointlistCountryPolicies(Set<OmPointlistCountryPolicy>
     * omPointlistCountryPolicies) { this.omPointlistCountryPolicies = omPointlistCountryPolicies; }
     */

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((changeDate == null) ? 0 : changeDate.hashCode());
        result = prime * result + ((defaultUnitId == null) ? 0 : defaultUnitId.hashCode());
        result = prime * result + recordId;
        result = prime * result + ((sourceId == null) ? 0 : sourceId.hashCode());
        result = prime * result + ((unitFamilyId == null) ? 0 : unitFamilyId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MUnitFamily other = (MUnitFamily) obj;
        if (changeDate == null) {
            if (other.changeDate != null)
                return false;
        } else if (!changeDate.equals(other.changeDate))
            return false;
        if (defaultUnitId == null) {
            if (other.defaultUnitId != null)
                return false;
        } else if (!defaultUnitId.equals(other.defaultUnitId))
            return false;
        if (recordId != other.recordId)
            return false;
        if (sourceId == null) {
            if (other.sourceId != null)
                return false;
        } else if (!sourceId.equals(other.sourceId))
            return false;
        if (unitFamilyId == null) {
            if (other.unitFamilyId != null)
                return false;
        } else if (!unitFamilyId.equals(other.unitFamilyId))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeDate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
    
    private UOMMeasurementService measurementService;

    public void injectUOMMeasurementService(UOMMeasurementService measurementService) {
        this.measurementService = measurementService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<MUnitFamily> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.measurementService.listAllMeasurementUnitFamily();

    }
}
