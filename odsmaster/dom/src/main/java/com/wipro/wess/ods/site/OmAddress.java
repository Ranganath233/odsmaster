package com.wipro.wess.ods.site;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

import java.util.HashSet;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.organisation.MOrganisation;

/**
 * OmAddress generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_address", objectIdClass = OmAddressPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER, column = "version")
@javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name = "fetch_addresses_by_user", language = "JPQL", value = "SELECT address FROM com.wipro.wess.ods.site.OmAddress address "
        + " JOIN address.orgId orgId WHERE EXISTS "
        + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site.orgId = orgId AND permission IN "
        + " (SELECT "
        + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
        + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) "),
        @javax.jdo.annotations.Query(name = "fetch_addresses_by_org_user", language = "JPQL", value = "SELECT address FROM com.wipro.wess.ods.site.OmAddress address "
                + " JOIN address.orgId orgId WHERE orgId = :orgId AND EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site.orgId = orgId AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@Audited
@ObjectType("OmAddress")
@Bookmarkable
public class OmAddress implements java.io.Serializable, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = -5542259047918429027L;

    private String addressId;

    private MOrganisation orgId;

    private String streetName;

    private String city;

    private String state;

    private String country;

    private String postalCode;

    private Set<OmSite> sites = new HashSet<OmSite>();
    
    private String configUser;

    public OmAddress(String addressId, MOrganisation orgId) {
        super();
        this.addressId = addressId;
        this.orgId = orgId;
    }

    public OmAddress() {
    }

    public OmAddress(String addressId, MOrganisation orgId, String streetName, String city) {
        this.addressId = addressId;
        this.orgId = orgId;
        this.streetName = streetName;
        this.city = city;
    }

    public OmAddress(String addressId, MOrganisation orgId, String streetName, String city, String state,
            String country, String postalCode) {
        this.addressId = addressId;
        this.orgId = orgId;
        this.streetName = streetName;
        this.city = city;
        this.state = state;
        this.country = country;
        this.postalCode = postalCode;
    }

    @Column(allowsNull = "false", name = "address_id")
    @Title
    @Persistent(primaryKey = "true")
    public String getAddressId() {
        return addressId;
    }

    public void setAddressId(String addressId) {
        this.addressId = addressId;
    }

    @Column(allowsNull = "false", name = "org_id")
    @Title
    @Persistent(primaryKey = "true")
    public MOrganisation getOrgId() {
        return orgId;
    }

    public void setOrgId(MOrganisation orgId) {
        this.orgId = orgId;
    }

    @Column(allowsNull = "false", name = "street_name")
    public String getStreetName() {
        return this.streetName;
    }

    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }

    @Column(allowsNull = "false", name = "city")
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "state")
    @Optional
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "country")
    @Optional
    public String getCountry() {
        return this.country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    @Column(name = "postal_code")
    @Optional
    public String getPostalCode() {
        return this.postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    @Persistent(mappedBy = "omAddress", dependentElement = "true")
    public Set<OmSite> getSites() {
        return sites;
    }

    public void setSites(Set<OmSite> sites) {
        this.sites = sites;
    }
    

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    
    
    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }
    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

}
