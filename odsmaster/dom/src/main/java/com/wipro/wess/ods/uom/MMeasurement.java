package com.wipro.wess.ods.uom;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.munit.MUnitFamily;

/**
 * MMeasurement generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_measurement", objectIdClass = MeasurementPK.class, identityType = IdentityType.APPLICATION)
@Audited
@Bookmarkable
@ObjectType("MMeasurement")
public class MMeasurement implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = -743192873576051854L;

    private String measureId;

    private MUnitFamily MUnitFamily;

    private int recordId;

    private String measureDesc;

    private Date changeDate;

    private Long sourceId;

    private String configUser;

    /*
     * private Set<OmUomOrgPolicy> omUomOrgPolicies = new HashSet<OmUomOrgPolicy>(0); private Set<OmUomCountryPolicy>
     * omUomCountryPolicies = new HashSet<OmUomCountryPolicy>(0); private Set<MProfilingMeasurementConfig>
     * MProfilingMeasurementConfigs = new HashSet<MProfilingMeasurementConfig>(0); private Set<OmUomExtDataSourceExcept>
     * omUomExtDataSourceExcepts = new HashSet<OmUomExtDataSourceExcept>(0); private Set<OmUomCountryExcept>
     * omUomCountryExcepts = new HashSet<OmUomCountryExcept>(0); private Set<TtMsaProfileSummarizedDay>
     * ttMsaProfileSummarizedDaies = new HashSet<TtMsaProfileSummarizedDay>(0); private Set<MUomDefaults> MUomDefaultses
     * = new HashSet<MUomDefaults>(0); private Set<OmUomSiteExcept> omUomSiteExcepts = new HashSet<OmUomSiteExcept>(0);
     */

    public MMeasurement() {
    }

    public MMeasurement(String measureId, MUnitFamily MUnitFamily, int recordId, String measureDesc, Date changeDate) {
        this.measureId = measureId;
        this.MUnitFamily = MUnitFamily;
        this.recordId = recordId;
        this.measureDesc = measureDesc;
        this.changeDate = changeDate;
    }

    public MMeasurement(String measureId, MUnitFamily MUnitFamily, int recordId, String measureDesc, Date changeDate,
            Long sourceId) {
        this.measureId = measureId;
        this.MUnitFamily = MUnitFamily;
        this.recordId = recordId;
        this.measureDesc = measureDesc;
        this.changeDate = changeDate;
        this.sourceId = sourceId;
    }

    @Column(name = "measure_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public String getMeasureId() {
        return this.measureId;
    }

    public void setMeasureId(String measureId) {
        this.measureId = measureId;
    }

    @Column(name = "def_unit_family_id", allowsNull = "false")
    public MUnitFamily getMUnitFamily() {
        return this.MUnitFamily;
    }

    public void setMUnitFamily(MUnitFamily MUnitFamily) {
        this.MUnitFamily = MUnitFamily;
    }

    @Column(name = "record_id", allowsNull = "false")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.OBJECT_FORMS)
    public int getRecordId() {
        return this.recordId;
    }

    public void setRecordId(int recordId) {
        this.recordId = recordId;
    }

    @Column(name = "measure_desc", allowsNull = "false")
    public String getMeasureDesc() {
        return this.measureDesc;
    }

    public void setMeasureDesc(String measureDesc) {
        this.measureDesc = measureDesc;
    }

    @Column(name = "change_date", allowsNull = "false")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDate() {
        return this.changeDate;
    }

    public void setChangeDate(Date changeDate) {
        this.changeDate = changeDate;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((measureId == null) ? 0 : measureId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MMeasurement other = (MMeasurement) obj;
        if (measureId == null) {
            if (other.measureId != null)
                return false;
        } else if (!measureId.equals(other.measureId))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public List<MUnitFamily> choicesMUnitFamily() {
        return this.container.allInstances(MUnitFamily.class);
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeDate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private UOMMeasurementService measurementService;

    public void injectUOMMeasurementService(UOMMeasurementService measurementService) {
        this.measurementService = measurementService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<MMeasurement> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.measurementService.listAllMeasurements();

    }
}
