package com.wipro.wess.ods.msa;

import java.nio.charset.Charset;
import java.util.StringTokenizer;

import com.google.common.io.BaseEncoding;
import com.wipro.wess.ods.organisation.OrganisationPK;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

/**
 * OmMsaConsFrId generated by hbm2java
 */
public class OmMsaConsFrPK implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 8386847930341546903L;

    public OrganisationPK orgId;

    public OmMsaConfigPK msaUid;

    public String typeCode;

    public OmMsaConsFrPK() {
    }

    public OmMsaConsFrPK(OrganisationPK orgId, OmMsaConfigPK msaUid, String typeCode) {
        this.orgId = orgId;
        this.msaUid = msaUid;
        this.typeCode = typeCode;
    }

    public OmMsaConsFrPK(String key){
        StringTokenizer token = new StringTokenizer(decode(key), "-");
        this.orgId = new OrganisationPK(token.nextToken());
        this.msaUid = new OmMsaConfigPK(token.nextToken());
        this.typeCode = token.nextToken();
    }
   
    

    @Override
    public String toString() {
        return "" + encode(this.orgId.toString() + "-" + this.msaUid.toString() + "-" + this.typeCode);
    }
    

    
    public OrganisationPK getOrgId() {
        return orgId;
    }

    
    public void setOrgId(OrganisationPK orgId) {
        this.orgId = orgId;
    }

    
    public OmMsaConfigPK getMsaUid() {
        return msaUid;
    }

    
    public void setMsaUid(OmMsaConfigPK msaUid) {
        this.msaUid = msaUid;
    }

    
    public String getTypeCode() {
        return typeCode;
    }

    
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((msaUid == null) ? 0 : msaUid.hashCode());
        result = prime * result + ((orgId == null) ? 0 : orgId.hashCode());
        result = prime * result + ((typeCode == null) ? 0 : typeCode.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmMsaConsFrPK other = (OmMsaConsFrPK) obj;
        if (msaUid == null) {
            if (other.msaUid != null)
                return false;
        } else if (!msaUid.equals(other.msaUid))
            return false;
        if (orgId == null) {
            if (other.orgId != null)
                return false;
        } else if (!orgId.equals(other.orgId))
            return false;
        if (typeCode == null) {
            if (other.typeCode != null)
                return false;
        } else if (!typeCode.equals(other.typeCode))
            return false;
        return true;
    }

    private static String encode(String str) {
        return BaseEncoding.base32().encode(str.getBytes(Charset.forName("UTF-8")));
    }

    private static String decode(String str) {
        return new String(BaseEncoding.base32().decode(str), Charset.forName("UTF-8"));
    }
}
