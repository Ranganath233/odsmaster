package com.wipro.wess.ods.asset.servicemapping;

import java.nio.charset.Charset;
import java.util.StringTokenizer;

import com.google.common.io.BaseEncoding;
import com.wipro.wess.ods.asset.OmAssetPK;
import com.wipro.wess.ods.organisation.OrganisationPK;
import com.wipro.wess.ods.service.ServiceConfigPK;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

/**
 * OmAssetInputserviceId generated by hbm2java
 */
public class OmAssetInputservicePK implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = -6237408186542751719L;

    public OrganisationPK orgId;

    public OmAssetPK assetUid;

    public ServiceConfigPK inputserviceAssetUid;

    public OmAssetInputservicePK() {
    }

    public OmAssetInputservicePK(OrganisationPK orgId, OmAssetPK assetUid, ServiceConfigPK inputserviceAssetUid) {
        this.orgId = orgId;
        this.assetUid = assetUid;
        this.inputserviceAssetUid = inputserviceAssetUid;
    }

    public OmAssetInputservicePK(String key) {
        StringTokenizer token = new StringTokenizer(decode(key), "-");
        this.orgId = new OrganisationPK(token.nextToken());
        this.assetUid = new OmAssetPK(token.nextToken());
        this.inputserviceAssetUid = new ServiceConfigPK(token.nextToken());
    }

    @Override
    public String toString() {
        return encode(this.orgId.toString() + "-" + this.assetUid.toString() + "-"
                + this.inputserviceAssetUid.toString());
    }

    public OrganisationPK getOrgId() {
        return orgId;
    }

    public void setOrgId(OrganisationPK orgId) {
        this.orgId = orgId;
    }

    public OmAssetPK getAssetUid() {
        return assetUid;
    }

    public void setAssetUid(OmAssetPK assetUid) {
        this.assetUid = assetUid;
    }

    public ServiceConfigPK getInputserviceAssetUid() {
        return inputserviceAssetUid;
    }

    public void setInputserviceAssetUid(ServiceConfigPK inputserviceAssetUid) {
        this.inputserviceAssetUid = inputserviceAssetUid;
    }

    private static String encode(String str) {
        return BaseEncoding.base32().encode(str.getBytes(Charset.forName("UTF-8")));
    }

    private static String decode(String str) {
        return new String(BaseEncoding.base32().decode(str), Charset.forName("UTF-8"));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((assetUid == null) ? 0 : assetUid.hashCode());
        result = prime * result + ((inputserviceAssetUid == null) ? 0 : inputserviceAssetUid.hashCode());
        result = prime * result + ((orgId == null) ? 0 : orgId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmAssetInputservicePK other = (OmAssetInputservicePK) obj;
        if (assetUid == null) {
            if (other.assetUid != null)
                return false;
        } else if (!assetUid.equals(other.assetUid))
            return false;
        if (inputserviceAssetUid == null) {
            if (other.inputserviceAssetUid != null)
                return false;
        } else if (!inputserviceAssetUid.equals(other.inputserviceAssetUid))
            return false;
        if (orgId == null) {
            if (other.orgId != null)
                return false;
        } else if (!orgId.equals(other.orgId))
            return false;
        return true;
    }

}
