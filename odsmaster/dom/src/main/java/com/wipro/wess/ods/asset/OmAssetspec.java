package com.wipro.wess.ods.asset;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Mandatory;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

/**
 * OmAssetspec generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_assetspec", objectIdClass = OmAssetspecPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_OmAssetspec_by_pk", language = "JDOQL", value = "SELECT "
                + " OmAssetspec FROM com.wipro.wess.ods.asset.OmAssetspec OmAssetspec "
                + " WHERE assetUid.assetUid == :assetUid && attributeCode == :attributeCode"),
        @javax.jdo.annotations.Query(name = "fetch_assetspecs_by_user", language = "JPQL", value = "SELECT assetspec FROM com.wipro.wess.ods.asset.OmAssetspec assetspec "
                + " JOIN assetspec.assetUid asset "
                + " JOIN asset.omLocationHierarchy loc_hcy "
                + " JOIN loc_hcy.omSite site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@Audited
@ObjectType("OmAssetspec")
@Bookmarkable
public class OmAssetspec implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = -6392417426349597341L;

    private OmAsset assetUid;

    // private MOrganisation orgId;

    private int attributeId;

    private int rowseqId;

    private String attributeCode;

    private BigDecimal numvalue;

    private String unitSymbol;

    private String alnvalue;

    private Long sourceId;

    private String changeby;

    private Date changedate;

    private Long loadbatch;

    private Date loaddate;

    private String configUser;
    
    public OmAssetspec() {
    }

    public OmAssetspec(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    public OmAssetspec(int rowseqId, String attributeCode, BigDecimal numvalue, String unitSymbol, String alnvalue,
            Long sourceId, String changeby, Date changedate, Long loadbatch, Date loaddate) {
        this.rowseqId = rowseqId;
        this.attributeCode = attributeCode;
        this.numvalue = numvalue;
        this.unitSymbol = unitSymbol;
        this.alnvalue = alnvalue;
        this.sourceId = sourceId;
        this.changeby = changeby;
        this.changedate = changedate;
        this.loadbatch = loadbatch;
        this.loaddate = loaddate;
    }

    @Title
    @Columns(value = { @Column(allowsNull = "false", name = "asset_uid"),
            @Column(allowsNull = "false", name = "org_id") })
    @Persistent(primaryKey = "true")
    @Mandatory
    public OmAsset getAssetUid() {
        return assetUid;
    }

    public void setAssetUid(OmAsset assetUid) {
        this.assetUid = assetUid;
    }

    /*
     * @Title
     * @Column(allowsNull = "false", name = "org_id")
     * @Persistent(primaryKey = "true") public MOrganisation getOrgId() { return orgId; } public void
     * setOrgId(MOrganisation orgId) { this.orgId = orgId; }
     */

    @Column(allowsNull = "false", name = "attribute_id")
    @Persistent(primaryKey = "true")
    public int getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(int attributeId) {
        this.attributeId = attributeId;
    }

    @Column(allowsNull = "false", name = "rowseq_id")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden
    public int getRowseqId() {
        return this.rowseqId;
    }

    public void setRowseqId(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    @Title
    @Column(name = "attribute_code")
    public String getAttributeCode() {
        return this.attributeCode;
    }

    public void setAttributeCode(String attributeCode) {
        this.attributeCode = attributeCode;
    }

    @Column(name = "numvalue")
    public BigDecimal getNumvalue() {
        return this.numvalue;
    }

    public void setNumvalue(BigDecimal numvalue) {
        this.numvalue = numvalue;
    }

    @Column(name = "unit_symbol")
    @Hidden
    public String getUnitSymbol() {
        return this.unitSymbol;
    }

    public void setUnitSymbol(String unitSymbol) {
        this.unitSymbol = unitSymbol;
    }

    @Column(name = "alnvalue")
    public String getAlnvalue() {
        return this.alnvalue;
    }

    public void setAlnvalue(String alnvalue) {
        this.alnvalue = alnvalue;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "changeby")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeby() {
        return this.changeby;
    }

    public void setChangeby(String changeby) {
        this.changeby = changeby;
    }

    @Column(name = "changedate")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangedate() {
        return this.changedate;
    }

    public void setChangedate(Date changedate) {
        this.changedate = changedate;
    }

    @Column(name = "loadbatch")
    @Hidden
    public Long getLoadbatch() {
        return this.loadbatch;
    }

    public void setLoadbatch(Long loadbatch) {
        this.loadbatch = loadbatch;
    }

    @Column(name = "loaddate")
    @Hidden
    public Date getLoaddate() {
        return this.loaddate;
    }

    public void setLoaddate(Date loaddate) {
        this.loaddate = loaddate;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((assetUid == null) ? 0 : assetUid.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmAssetspec other = (OmAssetspec) obj;
        if (assetUid == null) {
            if (other.assetUid != null)
                return false;
        } else if (!assetUid.equals(other.assetUid))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeby(this.container.getUser().getName());
        this.setChangedate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
    
    private OmAssetService assetService;

    public void injectOmAssetService(OmAssetService assetService) {
        this.assetService = assetService;
    }
    @Bulk
    @CssClass("x-caution")
    public List<OmAssetspec> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.assetService.listAllAssetspecs();
        
    }

}
