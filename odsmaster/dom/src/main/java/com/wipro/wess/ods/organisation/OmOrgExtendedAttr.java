package com.wipro.wess.ods.organisation;



import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;
import org.apache.isis.applib.util.ObjectContracts;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

/**
 * OmOrgExtendedAttr generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_org_extended_attr", objectIdClass = OmOrgExtendedAttrPK.class,
identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
// @javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name =
// "fetch_orgnaisation_by_id", language = "JDOQL", value = "SELECT "
// + "FROM com.wipro.wess.MOrganisation " + "WHERE orgId == :orgId") })
@Audited
@ObjectType("OmOrgExtendedAttr")
@Bookmarkable
public class OmOrgExtendedAttr implements java.io.Serializable, Comparable<OmOrgExtendedAttr>, InstanceCallbacks {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3478545663858450773L;

	// private String orgId;

	private String parameterName;

	private String parameterValue;

	private String paramDes;

	public MOrganisation organisation;
	
	private String configUser;

	// //////////////////////////////////////
	// Injected
	// //////////////////////////////////////
	
	private OrganisationService organisationService;

	private DomainObjectContainer container;

	public void injectDomainObjectContainer(
			final DomainObjectContainer container) {
		this.container = container;
	}
	
	public void injectOrganisationService(OrganisationService organisationService){
		this.organisationService = organisationService;
	}

	public OmOrgExtendedAttr() {
	}

	public OmOrgExtendedAttr(String parameterValue, String paramDes) {
		this.parameterValue = parameterValue;
		this.paramDes = paramDes;
	}

	@Column(allowsNull = "false", name = "parameter_value")
	public String getParameterValue() {
		return this.parameterValue;
	}

	public void setParameterValue(String parameterValue) {
		this.parameterValue = parameterValue;
	}

	@Column(allowsNull = "false", name = "param_des")
	public String getParamDes() {
		return this.paramDes;
	}

	public void setParamDes(String paramDes) {
		this.paramDes = paramDes;
	}

	/*
	 * @Column(allowsNull = "false", name = "org_id") public String getOrgId() {
	 * return orgId; }
	 * 
	 * public void setOrgId(String orgId) { this.orgId = orgId; }
	 */

	@Persistent(primaryKey = "true", dependent = "false")
	@Column(allowsNull = "false", name = "org_id")
	@Title
	public MOrganisation getOrganisation() {
		return organisation;
	}

	public void setOrganisation(MOrganisation organisation) {
		this.organisation = organisation;
	}

	@Persistent(primaryKey = "true")
	@Column(allowsNull = "false", name = "parameter_name")
	@Title
	public String getParameterName() {
		return parameterName;
	}

	public void setParameterName(String parameterName) {
		this.parameterName = parameterName;
	}

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((organisation == null) ? 0 : organisation.hashCode());
		result = prime * result
				+ ((parameterName == null) ? 0 : parameterName.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		OmOrgExtendedAttr other = (OmOrgExtendedAttr) obj;
		if (organisation == null) {
			if (other.organisation != null)
				return false;
		} else if (!organisation.equals(other.organisation))
			return false;
		if (parameterName == null) {
			if (other.parameterName != null)
				return false;
		} else if (!parameterName.equals(other.parameterName))
			return false;
		return true;
	}

	/*
	 * public List<String> choicesOrgId(){ List<String> orgIds = new
	 * ArrayList<String>(); for(MOrganisation organisation :
	 * this.container.allInstances(MOrganisation.class)){
	 * orgIds.add(organisation.getOrgId()); } return orgIds; }
	 * 
	 * public List<String> autoCompleteOrgId(String orgId){ QueryDefault<String>
	 * query = new QueryDefault<String>(String.class,
	 * "fetch_orgnaisation_by_id", "orgId", orgId); List<String>
	 * organisatinsList = this.container.allMatches(query); return
	 * organisatinsList; }
	 */
//
	public List<MOrganisation> choicesOrganisation() {

		return this.container.allInstances(MOrganisation.class);
	}
	
	@Override
	public int compareTo(OmOrgExtendedAttr other) {
		return ObjectContracts.compare(this, other, "parameterName");
	}

	@Bulk
	@CssClass("x-caution")
	public List<OmOrgExtendedAttr> delete() {
		//this.getOrganisation().getOmOrgExtendedAttrs().remove(this);
		//this.setOrganisation(null);
		container.removeIfNotAlready(this);
		//container.remove(this);
		container.informUser("Deleted " + container.titleOf(this));
		// invalid to return 'this' (cannot render a deleted object)
		
		return organisationService.listAllOrgExtdAttr();
	}
	

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
	

}
