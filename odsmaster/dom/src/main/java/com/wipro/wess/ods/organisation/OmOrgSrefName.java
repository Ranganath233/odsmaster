package com.wipro.wess.ods.organisation;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;
import org.apache.isis.applib.util.ObjectContracts;

import com.wipro.wess.ods.masterconfig.MSourcetypeConfig;
import com.wipro.wess.ods.masterconfig.MSourcetypeConfigs;


/**
 * OmOrgSrefName generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_org_sref_name", objectIdClass = OmOrgSrefNamePK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name = "fetch_orgsrefs_by_user", language = "JPQL", value = "SELECT orgsref FROM com.wipro.wess.ods.organisation.OmOrgSrefName orgsref "
        + " JOIN orgsref.MOrganisation organization WHERE EXISTS "
        + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site.orgId = organization AND permission IN "
        + " (SELECT "
        + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
        + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@Audited
@ObjectType("OmOrgSrefName")
@Bookmarkable
public class OmOrgSrefName implements java.io.Serializable, Comparable<OmOrgSrefName>, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = -3413435399568505835L;

    private MOrganisation MOrganisation;

    private MSourcetypeConfig MSourcetypeConfig;

    private String refUmDisplay;

    private String refOmDisplay;

    private String refCmDisplay;

    private String refMDisplay;

    private String insertedBy;

    private Date insertedTimeTs;

    private Long sourceId;
    
    private String configUser;

    // //////////////////////////////////////
    // Injected
    // //////////////////////////////////////

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    private OrganisationService organisationService;

    public void injectOrganisationService(OrganisationService organisationService) {
        this.organisationService = organisationService;
    }

    public OmOrgSrefName() {
    }

    public OmOrgSrefName(MOrganisation MOrganisation, MSourcetypeConfig MSourcetypeConfig, String insertedBy,
            Date insertedTimeTs) {
        this.MOrganisation = MOrganisation;
        this.MSourcetypeConfig = MSourcetypeConfig;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
    }

    public OmOrgSrefName(MOrganisation MOrganisation, MSourcetypeConfig MSourcetypeConfig, String refUmDisplay,
            String refOmDisplay, String refCmDisplay, String refMDisplay, String insertedBy, Date insertedTimeTs,
            Long sourceId) {
        this.MOrganisation = MOrganisation;
        this.MSourcetypeConfig = MSourcetypeConfig;
        this.refUmDisplay = refUmDisplay;
        this.refOmDisplay = refOmDisplay;
        this.refCmDisplay = refCmDisplay;
        this.refMDisplay = refMDisplay;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
        this.sourceId = sourceId;
    }

    @Persistent(primaryKey = "true", dependent = "false")
    @Column(allowsNull = "false", name = "org_id")
    @Title
    public MOrganisation getMOrganisation() {
        return this.MOrganisation;
    }

    public void setMOrganisation(MOrganisation MOrganisation) {
        this.MOrganisation = MOrganisation;
    }

    // @Persistent
    @Column(allowsNull = "false", name = "sourcetype_id")
    public MSourcetypeConfig getMSourcetypeConfig() {
        return this.MSourcetypeConfig;
    }

    public void setMSourcetypeConfig(MSourcetypeConfig MSourcetypeConfig) {
        this.MSourcetypeConfig = MSourcetypeConfig;
    }

    @Column(name = "ref_um_display")
    @Optional
    public String getRefUmDisplay() {
        return this.refUmDisplay;
    }

    public void setRefUmDisplay(String refUmDisplay) {
        this.refUmDisplay = refUmDisplay;
    }

    @Column(name = "ref_om_display")
    @Optional
    public String getRefOmDisplay() {
        return this.refOmDisplay;
    }

    public void setRefOmDisplay(String refOmDisplay) {
        this.refOmDisplay = refOmDisplay;
    }

    @Column(name = "ref_cm_display")
    @Optional
    public String getRefCmDisplay() {
        return this.refCmDisplay;
    }

    public void setRefCmDisplay(String refCmDisplay) {
        this.refCmDisplay = refCmDisplay;
    }

    @Column(name = "ref_m_display")
    @Optional
    public String getRefMDisplay() {
        return this.refMDisplay;
    }

    public void setRefMDisplay(String refMDisplay) {
        this.refMDisplay = refMDisplay;
    }

    @Column(allowsNull = "false", name = "inserted_by")
    public String getInsertedBy() {
        return this.insertedBy;
    }

    public void setInsertedBy(String insertedBy) {
        this.insertedBy = insertedBy;
    }

    @Column(allowsNull = "false", name = "inserted_time_ts")
    public Date getInsertedTimeTs() {
        return this.insertedTimeTs;
    }

    public void setInsertedTimeTs(Date insertedTimeTs) {
        this.insertedTimeTs = insertedTimeTs;
    }

    @Column(name = "source_id_")
    @Hidden(where = Where.ALL_TABLES)
    @Optional
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }


    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    @Override
    public int compareTo(OmOrgSrefName other) {
        return ObjectContracts.compare(this, other, "MOrganisation");
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmOrgSrefName> delete() {
        container.removeIfNotAlready(this);
        container.informUser("Deleted " + container.titleOf(this));
        // invalid to return 'this' (cannot render a deleted object)

        return organisationService.listAllOrgSrefName();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((MOrganisation == null) ? 0 : MOrganisation.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmOrgSrefName other = (OmOrgSrefName) obj;
        if (MOrganisation == null) {
            if (other.MOrganisation != null)
                return false;
        } else if (!MOrganisation.equals(other.MOrganisation))
            return false;
        return true;
    }

  

    public List<MOrganisation> choicesMOrganisation() {
        return this.organisationService.listAllOrganisations();
    }

    private MSourcetypeConfigs sourcetypeConfigService;
    
    public void injectMSourcetypeConfigs(MSourcetypeConfigs sourcetypeConfigService){
        this.sourcetypeConfigService = sourcetypeConfigService;
    }

    public List<MSourcetypeConfig> choicesMSourcetypeConfig() {

        return this.sourcetypeConfigService.listAll();
    }    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
    
    

}
