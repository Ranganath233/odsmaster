package com.wipro.wess.ods.site;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.ForeignKey;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.AutoComplete;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;
import org.apache.isis.applib.query.QueryDefault;
import org.apache.isis.applib.util.ObjectContracts;

import com.wipro.wess.ods.masterconfig.OmGeoLocation;
import com.wipro.wess.ods.masterconfig.MasterConfigurationService;
import com.wipro.wess.ods.organisation.MOrganisation;
import com.wipro.wess.ods.organisation.OrganisationService;
import com.wipro.wess.ods.sector.MSector;

/**
 * OmSite generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_site", objectIdClass = OmSitePK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@Audited
@Bookmarkable
@ObjectType("OmSite")
// @ForeignKey(name = "om_site_parent_site_id", members = {"parentOmSite"},
// columns = {@Column(name = "parent_site_id", target = "site_id"),
// @Column(name = "org_id", target = "org_id")})
@javax.jdo.annotations.Queries(value = {
        @javax.jdo.annotations.Query(name = "omsite_autoComplete", language = "JDOQL", value = "SELECT "
                + " FROM com.wipro.wess.ods.site.OmSite "
                + " WHERE siteName.indexOf(:siteName) >= 0 || orgId.orgId.indexOf(:siteName) >= 0 || siteId.indexOf(:siteName) >= 0"),
        @javax.jdo.annotations.Query(name = "omsite_findOmSiteByCriteria", language = "JDOQL", value = "SELECT "
                + " FROM com.wipro.wess.ods.site.OmSite " + " WHERE siteName.indexOf(:siteName) >= 0"),
        @javax.jdo.annotations.Query(name = "fetch_OmSite_by_site_and_org", language = "JDOQL", value = "SELECT "
                + " OmSite FROM com.wipro.wess.ods.site.OmSite OmSite WHERE orgId.orgId == :orgId && siteId == :siteId "),
        @javax.jdo.annotations.Query(name = "findOmSiteBySiteIdOrgIdSiteName", language = "JDOQL", value = "SELECT "
                + " FROM com.wipro.wess.ods.site.OmSite "
                + " WHERE siteName.indexOf(:siteName) >= 0 || orgId.orgId.indexOf(:siteName) >= 0 || siteId.indexOf(:siteName) >= 0"),
        @javax.jdo.annotations.Query(name = "fetch_sites_by_user", language = "JPQL", value = "SELECT site FROM com.wipro.wess.ods.site.OmSite site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) )") })
@AutoComplete(repository = OmSiteService.class, action = "autoComplete")
public class OmSite implements java.io.Serializable, Comparable<OmSite>, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = -3507638728742062445L;

    private String siteId;

    private MOrganisation orgId;

    private OmSite parentOmSite;

    private MSector MSector;

    private OmGeoLocation omGeoLocation;

    private OmAddress omAddress;

    private String siteName;

    private String siteDesc;

    private String siteType;

    private String city;

    private String approachName;

    private String categoryType;

    private String businessFunction;

    private Integer type;

    private String leaseType;

    private Date activeDate;

    private Date inActiveDate;

    private BigDecimal totalArea;

    private String totalAreaUnitId;

    private BigDecimal totalOccupiedArea;

    private String totalOccupiedUnitId;

    private BigDecimal ashraeOatSetpoint;

    private String oatOffsetOid;

    private BigDecimal oatOffsetAdjust;

    private BigDecimal ecoDeviationThreshold;

    private BigDecimal ecoUtilHrsThreshold;

    private String siteTimezone;

    private BigDecimal peopleCount;

    private BigDecimal longitude;

    private BigDecimal latitude;

    private String zipcode;

    private String weatherStation;

    private Character oatCalWriteback;

    private String postalAddress;

    private String state;

    private String country;

    private String changeBy;

    private Date changeDt;

    private BigDecimal ashraeOatLlSetpoint;

    // private OmLocationHierarchy omLocationHierarchy;
    // private OmSupplierAssetConfig omSupplierAssetConfig;

    private Set<OmSite> sites = new HashSet<OmSite>();

    private Set<OmMsaSiteMap> msaSites = new HashSet<OmMsaSiteMap>();
    
    private String configUser;

    // @NotPersistent
    // private OmSiteGroup group = new OmSiteGroup();

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    private OmSiteService omSites;

    public void injectOmSiteService(OmSiteService omSites) {
        this.omSites = omSites;
    }

    public OmSite() {
    }

    public OmSite(String siteId, MOrganisation orgId) {
        this.siteId = siteId;
        this.orgId = orgId;
    }

    public OmSite(OmSite parentOmSite,
    /* OmGeoLocation omGeoLocation, OmAddress omAddress, */String siteType, String changeBy, Date changeDt) {

        /*
         * this.parentOmSite = parentOmSite; this.omGeoLocation = omGeoLocation; this.omAddress = omAddress;
         */
        this.siteType = siteType;
        this.changeBy = changeBy;
        this.changeDt = changeDt;
    }

    public OmSite(/* OmSite parentOmSite, */
    MSector MSector,/* OmGeoLocation omGeoLocation, OmAddress omAddress, */
            String siteName, String siteDesc, String siteType, String city, String approachName, String categoryType,
            String businessFunction, Integer type, String leaseType, Date activeDate, Date inActiveDate,
            BigDecimal totalArea, String totalAreaUnitId, BigDecimal totalOccupiedArea, String totalOccupiedUnitId,
            BigDecimal ashraeOatSetpoint, String oatOffsetOid, BigDecimal oatOffsetAdjust,
            BigDecimal ecoDeviationThreshold, BigDecimal ecoUtilHrsThreshold, String siteTimezone,
            BigDecimal peopleCount, BigDecimal longitude, BigDecimal latitude, String zipcode, String weatherStation,
            Character oatCalWriteback, String postalAddress, String state, String country, String changeBy,
            Date changeDt, BigDecimal ashraeOatLlSetpoint) {

        // this.parentOmSite = parentOmSite;
        this.MSector = MSector;
        // this.omGeoLocation = omGeoLocation;
        // this.omAddress = omAddress;
        this.siteName = siteName;
        this.siteDesc = siteDesc;
        this.siteType = siteType;
        this.city = city;
        this.approachName = approachName;
        this.categoryType = categoryType;
        this.businessFunction = businessFunction;
        this.type = type;
        this.leaseType = leaseType;
        this.activeDate = activeDate;
        this.inActiveDate = inActiveDate;
        this.totalArea = totalArea;
        this.totalAreaUnitId = totalAreaUnitId;
        this.totalOccupiedArea = totalOccupiedArea;
        this.totalOccupiedUnitId = totalOccupiedUnitId;
        this.ashraeOatSetpoint = ashraeOatSetpoint;
        this.oatOffsetOid = oatOffsetOid;
        this.oatOffsetAdjust = oatOffsetAdjust;
        this.ecoDeviationThreshold = ecoDeviationThreshold;
        this.ecoUtilHrsThreshold = ecoUtilHrsThreshold;
        this.siteTimezone = siteTimezone;
        this.peopleCount = peopleCount;
        this.longitude = longitude;
        this.latitude = latitude;
        this.zipcode = zipcode;
        this.weatherStation = weatherStation;
        this.oatCalWriteback = oatCalWriteback;
        this.postalAddress = postalAddress;
        this.state = state;
        this.country = country;
        this.changeBy = changeBy;
        this.changeDt = changeDt;
        this.ashraeOatLlSetpoint = ashraeOatLlSetpoint;
    }

    @Persistent(primaryKey = "true")
    @Column(allowsNull = "false", name = "site_id")
    @Title
    // @PrimaryKey
    public String getSiteId() {
        return siteId;
    }

    public void setSiteId(String siteId) {
        this.siteId = siteId;
    }

    @Persistent(primaryKey = "true", dependent = "false")
    @Column(allowsNull = "false", name = "org_id")
    @Title
    // @PrimaryKey
    public MOrganisation getOrgId() {
        return orgId;
    }

    public void setOrgId(MOrganisation orgId) {
        this.orgId = orgId;
    }

    @Persistent(dependent = "false")
    @Columns(value = { @Column(name = "parent_site_id", target = "site_id"),
            @Column(name = "site_org_id", target = "org_id") })
    // @Element(columns = {@Column(name = "parent_site_id", target = "site_id"),
    // @Column(name = "org_id", target = "org_id")})
    @Optional
    // @ForeignKey(name = "om_site_parent_site_id", updateAction =
    // ForeignKeyAction.NONE, deleteAction = ForeignKeyAction.NONE)
    public OmSite getParentOmSite() {
        return this.parentOmSite;
    }

    public void setParentOmSite(OmSite parentOmSite) {
        this.parentOmSite = parentOmSite;
    }

    @Persistent(mappedBy = "parentOmSite", dependentElement = "true")
    public Set<OmSite> getSites() {
        return sites;
    }

    public void setSites(Set<OmSite> sites) {
        this.sites = sites;
    }

    @Persistent(dependent = "false")
    @Column(name = "sector_id")
    @Optional
    @ForeignKey
    @Hidden(where = Where.ALL_TABLES)
    public MSector getMSector() {
        return this.MSector;
    }

    public void setMSector(MSector MSector) {
        this.MSector = MSector;
    }

    @Columns(value = { @Column(name = "location_id", target = "location_id"),
            @Column(name = "loc_org_id", target = "org_id") })
    // @Element(columns = {@Column(name = "location_id", target =
    // "location_id"), @Column(name = "org_id", target = "org_id")})
    @Optional
    @ForeignKey
    @Persistent(dependent = "false")
    @Hidden(where = Where.ALL_TABLES)
    public OmGeoLocation getOmGeoLocation() {
        return this.omGeoLocation;
    }

    public void setOmGeoLocation(OmGeoLocation omGeoLocation) {
        this.omGeoLocation = omGeoLocation;
    }

    @Columns(value = { @Column(name = "address_id", target = "address_id"),
            @Column(name = "addr_org_id", target = "org_id") })
    // @Element(columns = {@Column(name = "address_id", target = "address_id"),
    // @Column(name = "org_id", target = "org_id")})
    @Optional
    @ForeignKey
    @Persistent(dependent = "false")
    @Hidden(where = Where.ALL_TABLES)
    public OmAddress getOmAddress() {
        return this.omAddress;
    }

    public void setOmAddress(OmAddress omAddress) {
        this.omAddress = omAddress;
    }

    @Column(name = "site_name")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getSiteName() {
        return this.siteName;
    }

    public void setSiteName(String siteName) {
        this.siteName = siteName;
    }

    @Column(name = "site_desc")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getSiteDesc() {
        return this.siteDesc;
    }

    public void setSiteDesc(String siteDesc) {
        this.siteDesc = siteDesc;
    }

    @Column(allowsNull = "false", name = "site_type")
    @Hidden(where = Where.ALL_TABLES)
    public String getSiteType() {
        return this.siteType;
    }

    public void setSiteType(String siteType) {
        this.siteType = siteType;
    }

    @Column(name = "city")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "approach_name")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getApproachName() {
        return this.approachName;
    }

    public void setApproachName(String approachName) {
        this.approachName = approachName;
    }

    @Column(name = "category_type")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getCategoryType() {
        return this.categoryType;
    }

    public void setCategoryType(String categoryType) {
        this.categoryType = categoryType;
    }

    @Column(name = "business_function")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getBusinessFunction() {
        return this.businessFunction;
    }

    public void setBusinessFunction(String businessFunction) {
        this.businessFunction = businessFunction;
    }

    @Column(name = "type")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public Integer getType() {
        return this.type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    @Column(name = "lease_type")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getLeaseType() {
        return this.leaseType;
    }

    public void setLeaseType(String leaseType) {
        this.leaseType = leaseType;
    }

    @Column(name = "active_date")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public Date getActiveDate() {
        return this.activeDate;
    }

    public void setActiveDate(Date activeDate) {
        this.activeDate = activeDate;
    }

    @Column(name = "in_active_date")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public Date getInActiveDate() {
        return this.inActiveDate;
    }

    public void setInActiveDate(Date inActiveDate) {
        this.inActiveDate = inActiveDate;
    }

    @Column(name = "total_area")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getTotalArea() {
        return this.totalArea;
    }

    public void setTotalArea(BigDecimal totalArea) {
        this.totalArea = totalArea;
    }

    @Column(name = "total_area_unit_id")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getTotalAreaUnitId() {
        return this.totalAreaUnitId;
    }

    public void setTotalAreaUnitId(String totalAreaUnitId) {
        this.totalAreaUnitId = totalAreaUnitId;
    }

    @Column(name = "total_occupied_area")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getTotalOccupiedArea() {
        return this.totalOccupiedArea;
    }

    public void setTotalOccupiedArea(BigDecimal totalOccupiedArea) {
        this.totalOccupiedArea = totalOccupiedArea;
    }

    @Column(name = "total_occupied_unit_id")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getTotalOccupiedUnitId() {
        return this.totalOccupiedUnitId;
    }

    public void setTotalOccupiedUnitId(String totalOccupiedUnitId) {
        this.totalOccupiedUnitId = totalOccupiedUnitId;
    }

    @Column(name = "ashrae_oat_setpoint")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getAshraeOatSetpoint() {
        return this.ashraeOatSetpoint;
    }

    public void setAshraeOatSetpoint(BigDecimal ashraeOatSetpoint) {
        this.ashraeOatSetpoint = ashraeOatSetpoint;
    }

    @Column(name = "oat_offset_oid")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getOatOffsetOid() {
        return this.oatOffsetOid;
    }

    public void setOatOffsetOid(String oatOffsetOid) {
        this.oatOffsetOid = oatOffsetOid;
    }

    @Column(name = "oat_offset_adjust")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getOatOffsetAdjust() {
        return this.oatOffsetAdjust;
    }

    public void setOatOffsetAdjust(BigDecimal oatOffsetAdjust) {
        this.oatOffsetAdjust = oatOffsetAdjust;
    }

    @Column(name = "eco_deviation_threshold")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getEcoDeviationThreshold() {
        return this.ecoDeviationThreshold;
    }

    public void setEcoDeviationThreshold(BigDecimal ecoDeviationThreshold) {
        this.ecoDeviationThreshold = ecoDeviationThreshold;
    }

    @Column(name = "eco_util_hrs_threshold")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getEcoUtilHrsThreshold() {
        return this.ecoUtilHrsThreshold;
    }

    public void setEcoUtilHrsThreshold(BigDecimal ecoUtilHrsThreshold) {
        this.ecoUtilHrsThreshold = ecoUtilHrsThreshold;
    }

    @Column(name = "site_timezone")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getSiteTimezone() {
        return this.siteTimezone;
    }

    public void setSiteTimezone(String siteTimezone) {
        this.siteTimezone = siteTimezone;
    }

    @Column(name = "people_count")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getPeopleCount() {
        return this.peopleCount;
    }

    public void setPeopleCount(BigDecimal peopleCount) {
        this.peopleCount = peopleCount;
    }

    @Column(name = "longitude")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getLongitude() {
        return this.longitude;
    }

    public void setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
    }

    @Column(name = "latitude")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getLatitude() {
        return this.latitude;
    }

    public void setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
    }

    @Column(name = "zipcode")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getZipcode() {
        return this.zipcode;
    }

    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }

    @Column(name = "weather_station")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getWeatherStation() {
        return this.weatherStation;
    }

    public void setWeatherStation(String weatherStation) {
        this.weatherStation = weatherStation;
    }

    @Column(name = "oat_cal_writeback")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public Character getOatCalWriteback() {
        return this.oatCalWriteback;
    }

    public void setOatCalWriteback(Character oatCalWriteback) {
        this.oatCalWriteback = oatCalWriteback;
    }

    @Column(name = "postal_address")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getPostalAddress() {
        return this.postalAddress;
    }

    public void setPostalAddress(String postalAddress) {
        this.postalAddress = postalAddress;
    }

    @Column(name = "state")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "country")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public String getCountry() {
        return this.country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    @Column(allowsNull = "false", name = "change_by")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeBy() {
        return this.changeBy;
    }

    public void setChangeBy(String changeBy) {
        this.changeBy = changeBy;
    }

    @Column(allowsNull = "false", name = "change_dt")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDt() {
        return this.changeDt;
    }

    public void setChangeDt(Date changeDt) {
        this.changeDt = changeDt;
    }

    @Column(name = "ashrae_oat_ll_setpoint")
    @Optional
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getAshraeOatLlSetpoint() {
        return this.ashraeOatLlSetpoint;
    }

    public void setAshraeOatLlSetpoint(BigDecimal ashraeOatLlSetpoint) {
        this.ashraeOatLlSetpoint = ashraeOatLlSetpoint;
    }

    @Persistent(mappedBy = "omSite", dependentElement = "true")
    public Set<OmMsaSiteMap> getMsaSites() {
        return msaSites;
    }

    public void setMsaSites(Set<OmMsaSiteMap> msaSites) {
        this.msaSites = msaSites;
    }
    

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    /*
     * @Persistent(mappedBy = "omSite", dependentElement = "true") public OmLocationHierarchy getOmLocationHierarchy() {
     * return omLocationHierarchy; } public void setOmLocationHierarchy(OmLocationHierarchy omLocationHierarchy) {
     * this.omLocationHierarchy = omLocationHierarchy; }
     * @Persistent(mappedBy = "omSite", dependentElement = "true")
     * @Optional public OmSupplierAssetConfig getOmSupplierAssetConfig() { return omSupplierAssetConfig; } public void
     * setOmSupplierAssetConfig(OmSupplierAssetConfig omSupplierAssetConfig) { this.omSupplierAssetConfig =
     * omSupplierAssetConfig; }
     */

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((orgId == null) ? 0 : orgId.hashCode());
        result = prime * result + ((siteId == null) ? 0 : siteId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmSite other = (OmSite) obj;
        if (orgId == null) {
            if (other.orgId != null)
                return false;
        } else if (!orgId.equals(other.orgId))
            return false;
        if (siteId == null) {
            if (other.siteId != null)
                return false;
        } else if (!siteId.equals(other.siteId))
            return false;
        return true;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmSite> delete() {
        this.container.removeIfNotAlready(this);
        // container.remove(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        // invalid to return 'this' (cannot render a deleted object)

        return this.omSites.listAllSites();
        
    }

    /*
     * private OmSiteGroupContributions omSiteGroupContributions; public void
     * injectOmSiteGroupContributions(OmSiteGroupContributions omSiteGroupContributions){ this.omSiteGroupContributions
     * = omSiteGroupContributions; System.out.println("\n grp contirb injected ---> " +this.omSiteGroupContributions); }
     */
    // @Bulk
    // //@CssClass("x-caution")
    // public List<OmSite> update(OmGroup group) {
    // /*if(this.group == null){
    // this.group = new OmSiteGroup();
    // } */
    // /*OmSiteGroup group = new OmSiteGroup();
    // group.getSites().add(this);
    // System.out.println("\n added site is ---> "+this);
    // System.out.println("\n group sites are ---> "+group.getSites());*/
    // this.container.informUser("Updated " + container.titleOf(this));
    //
    // return this.omSites.listAll();
    // }
    // private OmSite parentOmSite;
    // private MSector MSector;
    // private OmGeoLocation omGeoLocation;
    // private OmAddress omAddress;
    public List<MSector> choicesMSector() {
        return this.container.allInstances(MSector.class);
    }

    private MasterConfigurationService geoLocationService;

    public void injectOmGeoLocationService(MasterConfigurationService geoLocationService) {
        this.geoLocationService = geoLocationService;
    }

    public List<OmGeoLocation> choicesOmGeoLocation() {
        return this.geoLocationService.listAllGeolocations();
    }

    public List<OmAddress> choicesOmAddress() {
        return this.container.allMatches(new QueryDefault<OmAddress>(OmAddress.class, "fetch_addresses_by_user",
                "userName", this.container.getUser().getName()));
    }

    public List<OmSite> choicesParentOmSite() {
        List<OmSite> parentSites = this.omSites.listAllSites();
        parentSites.remove(this);
        return parentSites;
    }

    private OrganisationService orgService;

    public void injectOrganisationService(OrganisationService orgService) {
        this.orgService = orgService;
    }

    public List<MOrganisation> choicesOrgId() {

        return this.orgService.listAllOrganisations();
    }

    @Override
    public String toString() {
        return "OmSite [siteId=" + siteId + ", orgId=" + orgId + ", parentOmSite=" + parentOmSite + ", MSector="
                + MSector + ", omGeoLocation=" + omGeoLocation + ", omAddress=" + omAddress + ", siteName=" + siteName
                + ", siteDesc=" + siteDesc + ", siteType=" + siteType + ", city=" + city + ", approachName="
                + approachName + ", categoryType=" + categoryType + ", businessFunction=" + businessFunction
                + ", type=" + type + ", leaseType=" + leaseType + ", activeDate=" + activeDate + ", inActiveDate="
                + inActiveDate + ", totalArea=" + totalArea + ", totalAreaUnitId=" + totalAreaUnitId
                + ", totalOccupiedArea=" + totalOccupiedArea + ", totalOccupiedUnitId=" + totalOccupiedUnitId
                + ", ashraeOatSetpoint=" + ashraeOatSetpoint + ", oatOffsetOid=" + oatOffsetOid + ", oatOffsetAdjust="
                + oatOffsetAdjust + ", ecoDeviationThreshold=" + ecoDeviationThreshold + ", ecoUtilHrsThreshold="
                + ecoUtilHrsThreshold + ", siteTimezone=" + siteTimezone + ", peopleCount=" + peopleCount
                + ", longitude=" + longitude + ", latitude=" + latitude + ", zipcode=" + zipcode + ", weatherStation="
                + weatherStation + ", oatCalWriteback=" + oatCalWriteback + ", postalAddress=" + postalAddress
                + ", state=" + state + ", country=" + country + ", changeBy=" + changeBy + ", changeDt=" + changeDt
                + ", ashraeOatLlSetpoint=" + ashraeOatLlSetpoint + ", sites=" + sites + ", container=" + container
                + ", omSites=" + omSites + "]";
    }

    @Override
    public int compareTo(OmSite other) {
        return ObjectContracts.compare(this, other, "siteId");
    }

    public static enum SiteType {
        CAMPUS,
        BUILDING;
    }

    public List<String> choicesSiteType() {
        List<String> siteTypesList = new ArrayList<String>();
        siteTypesList.add(SiteType.CAMPUS.name());
        siteTypesList.add(SiteType.BUILDING.name());
        return siteTypesList;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeBy(this.container.getUser().getName());
        this.setChangeDt(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
}
