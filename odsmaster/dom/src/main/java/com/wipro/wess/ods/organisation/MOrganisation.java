package com.wipro.wess.ods.organisation;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;
import org.apache.isis.applib.util.ObjectContracts;

import com.wipro.wess.ods.masterconfig.OmGeoLocation;
import com.wipro.wess.ods.site.OmAddress;
import com.wipro.wess.ods.site.OmSite;

/**
 * MOrganisation generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_organisation", objectIdClass = OrganisationPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER, column = "version")
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_orgnaisation_by_id", language = "JDOQL", value = "SELECT "
                + " org FROM com.wipro.wess.ods.organisation.MOrganisation org " + " WHERE orgId == :orgId"),
        @javax.jdo.annotations.Query(name = "fetch_organizations_by_user", language = "JPQL", value = "SELECT organization FROM com.wipro.wess.ods.organisation.MOrganisation organization "
                + " WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site.orgId = organization AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@Audited
@ObjectType("MOrganisation")
@Bookmarkable
public class MOrganisation implements java.io.Serializable, Comparable<MOrganisation>, InstanceCallbacks {

    /**
	 * 
	 */

    private static final long serialVersionUID = 3840842974025631807L;

    /**
	 * 
	 */

    private String orgId;

    private String orgName;

    private String orgDesc;

    private String consolidationApproachName;

    private String primaryNumber;

    private Short invBaseYear;

    private Date ghgAccPeriodFrom;

    private Date ghgAccPeriodTo;

    private String streetAddress;

    private String addressLine2;

    private String city;

    private String postalCode;

    private String country;

    private String configUser;
    
    @Persistent(mappedBy = "organisation", dependentElement = "true")
    private Collection<OmOrgExtendedAttr> omOrgExtendedAttrs = new HashSet<OmOrgExtendedAttr>();

    @Persistent(mappedBy = "orgId", dependentElement = "true")
    private Set<OmSite> sites = new HashSet<OmSite>();

    @Persistent(mappedBy = "orgId", dependentElement = "true")
    private Set<OmGeoLocation> geoLocations = new HashSet<OmGeoLocation>();

    @Persistent(mappedBy = "orgId", dependentElement = "true")
    private Set<OmAddress> addresses = new HashSet<OmAddress>();

    public MOrganisation() {
    }

    public MOrganisation(String orgName, String orgDesc, String consolidationApproachName, String primaryNumber,
            Short invBaseYear, Date ghgAccPeriodFrom, Date ghgAccPeriodTo, String streetAddress, String addressLine2,
            String city, String postalCode, String country) {
        this.orgName = orgName;
        this.orgDesc = orgDesc;
        this.consolidationApproachName = consolidationApproachName;
        this.primaryNumber = primaryNumber;
        this.invBaseYear = invBaseYear;
        this.ghgAccPeriodFrom = ghgAccPeriodFrom;
        this.ghgAccPeriodTo = ghgAccPeriodTo;
        this.streetAddress = streetAddress;
        this.addressLine2 = addressLine2;
        this.city = city;
        this.postalCode = postalCode;
        this.country = country;
    }

    // //////////////////////////////////////
    // Injected
    // //////////////////////////////////////

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    private OrganisationService organisations;

    public void injectMOrganisations(final OrganisationService organisations) {
        this.organisations = organisations;
    }

    @javax.jdo.annotations.Column(allowsNull = "false", name = "org_id")
    @Title
    @Persistent(primaryKey = "true")
    @Named("Organisation Id")
    public String getOrgId() {
        return orgId;
    }

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    @javax.jdo.annotations.Column(allowsNull = "false", name = "org_name")
    public String getOrgName() {
        return this.orgName;
    }

    public void setOrgName(String orgName) {
        this.orgName = orgName;
    }

    @javax.jdo.annotations.Column(allowsNull = "false", name = "org_desc")
    @Hidden(where = Where.ALL_TABLES)
    public String getOrgDesc() {
        return this.orgDesc;
    }

    public void setOrgDesc(String orgDesc) {
        this.orgDesc = orgDesc;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "consolidation_approach_name")
    @Hidden(where = Where.ALL_TABLES)
    public String getConsolidationApproachName() {
        return this.consolidationApproachName;
    }

    public void setConsolidationApproachName(String consolidationApproachName) {
        this.consolidationApproachName = consolidationApproachName;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "primary_number")
    @Hidden(where = Where.ALL_TABLES)
    public String getPrimaryNumber() {
        return this.primaryNumber;
    }

    public void setPrimaryNumber(String primaryNumber) {
        this.primaryNumber = primaryNumber;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "inv_base_year")
    @Hidden(where = Where.ALL_TABLES)
    public Short getInvBaseYear() {
        return this.invBaseYear;
    }

    public void setInvBaseYear(Short invBaseYear) {
        this.invBaseYear = invBaseYear;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "ghg_acc_period_from")
    @Hidden(where = Where.ALL_TABLES)
    public Date getGhgAccPeriodFrom() {
        return this.ghgAccPeriodFrom;
    }

    public void setGhgAccPeriodFrom(Date ghgAccPeriodFrom) {
        this.ghgAccPeriodFrom = ghgAccPeriodFrom;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "ghg_acc_period_to")
    @Hidden(where = Where.ALL_TABLES)
    public Date getGhgAccPeriodTo() {
        return this.ghgAccPeriodTo;
    }

    public void setGhgAccPeriodTo(Date ghgAccPeriodTo) {
        this.ghgAccPeriodTo = ghgAccPeriodTo;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "street_address")
    @Hidden(where = Where.ALL_TABLES)
    public String getStreetAddress() {
        return this.streetAddress;
    }

    public void setStreetAddress(String streetAddress) {
        this.streetAddress = streetAddress;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "address_line2")
    @Hidden(where = Where.ALL_TABLES)
    public String getAddressLine2() {
        return this.addressLine2;
    }

    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "city")
    @Hidden(where = Where.ALL_TABLES)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "postal_code")
    @Hidden(where = Where.ALL_TABLES)
    public String getPostalCode() {
        return this.postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    @Optional
    @javax.jdo.annotations.Column(name = "country")
    @Hidden(where = Where.ALL_TABLES)
    public String getCountry() {
        return this.country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public Collection<OmOrgExtendedAttr> getOmOrgExtendedAttrs() {
        return omOrgExtendedAttrs;
    }

    public void setOmOrgExtendedAttrs(Collection<OmOrgExtendedAttr> omOrgExtendedAttrs) {
        this.omOrgExtendedAttrs = omOrgExtendedAttrs;
    }

    public Set<OmSite> getSites() {
        return sites;
    }

    public void setSites(Set<OmSite> sites) {
        this.sites = sites;
    }

    public Set<OmGeoLocation> getGeoLocations() {
        return geoLocations;
    }

    public void setGeoLocations(Set<OmGeoLocation> geoLocations) {
        this.geoLocations = geoLocations;
    }

    public Set<OmAddress> getAddresses() {
        return addresses;
    }

    public void setAddresses(Set<OmAddress> addresses) {
        this.addresses = addresses;
    }
    

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((orgId == null) ? 0 : orgId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MOrganisation other = (MOrganisation) obj;
        if (orgId == null) {
            if (other.orgId != null)
                return false;
        } else if (!orgId.equals(other.orgId))
            return false;
        return true;
    }

    @Override
    public int compareTo(MOrganisation other) {
        return ObjectContracts.compare(this, other, "orgId");
    }

    @Bulk
    @CssClass("x-caution")
    public List<MOrganisation> delete() {
        container.removeIfNotAlready(this);
        // container.remove(this);
        container.informUser("Deleted " + container.titleOf(this));
        // invalid to return 'this' (cannot render a deleted object)
        return organisations.listAllOrganisations();
    }

    @Override
    public String toString() {
        return this.orgId;
    }
    
    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

}
