package com.wipro.wess.ods.sector;

import java.util.HashSet;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.site.OmSite;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

/**
 * MSector generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_sector", objectIdClass = MSectorPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER, column = "version")
@Audited
@ObjectType("MSector")
@Bookmarkable
public class MSector implements java.io.Serializable, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = 6121948750164952371L;

    private String sectorId;

    private String sectorName;

    private String configUser;

    private Set<OmSite> sites = new HashSet<OmSite>();

    public MSector() {
    }

    public MSector(String sectorId) {
        this.sectorId = sectorId;
    }

    public MSector(String sectorId, String sectorName) {
        this.sectorId = sectorId;
        this.sectorName = sectorName;
    }

    @Column(allowsNull = "false", name = "sector_id", length = 6)
    @Title
    @Persistent(primaryKey = "true")
    public String getSectorId() {
        return this.sectorId;
    }

    public void setSectorId(String sectorId) {
        this.sectorId = sectorId;
    }

    @Column(name = "sector_name", length = 40)
    @Optional
    public String getSectorName() {
        return this.sectorName;
    }

    public void setSectorName(String sectorName) {
        this.sectorName = sectorName;
    }

    @Persistent(mappedBy = "MSector", dependentElement = "false")
    public Set<OmSite> getSites() {
        return sites;
    }

    public void setSites(Set<OmSite> sites) {
        this.sites = sites;
    }
    

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    
    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }
    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

}
