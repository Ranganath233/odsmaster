package com.wipro.wess.ods.utilitymeter;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.Sequence;
import javax.jdo.annotations.SequenceStrategy;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.organisation.MOrganisation;
import com.wipro.wess.ods.organisation.OrganisationService;
import com.wipro.wess.ods.upload.ProvisioningConstants;

/**
 * OmUtilitySupplier generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_utility_supplier", objectIdClass = UtilitySupplierPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_OmUtilitySupplier_by_pk", language = "JDOQL", value = "SELECT "
                + " OmUtilitySupplier FROM com.wipro.wess.ods.utilitymeter.OmUtilitySupplier OmUtilitySupplier "
                + " WHERE supplierId == :supplierId"),
        @javax.jdo.annotations.Query(name = "fetch_OmUtilitySupplier_by_supplier_code", language = "JDOQL", value = "SELECT "
                + " OmUtilitySupplier FROM com.wipro.wess.ods.utilitymeter.OmUtilitySupplier OmUtilitySupplier "
                + " WHERE supplierCode == :supplierCode && MOrganisation == :orgId"),
        @javax.jdo.annotations.Query(name = "fetch_utilsuppl_by_user", language = "JPQL", value = "SELECT utilsuppl FROM com.wipro.wess.ods.utilitymeter.OmUtilitySupplier utilsuppl "
                + " JOIN utilsuppl.MOrganisation organization WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site.orgId = organization AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@Audited
@ObjectType("OmUtilitySupplier")
@Bookmarkable
@Sequence(name = "supplier_id", datastoreSequence = "supplier_id", strategy = SequenceStrategy.CONTIGUOUS)
public class OmUtilitySupplier implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 7719576385508343753L;

    private long supplierId;

    private MOrganisation MOrganisation;

    private String supplierCode;

    private String supplierName;

    private String createdBy;

    private Date createDate;

    private String status;

    private String insertedBy;

    private Date insertedTimeTs;

    private Long sourceId;

    private String configUser;

    // private Set<OmMeterConfig> omMeterConfigs = new HashSet<OmMeterConfig>(0);

    public OmUtilitySupplier() {
    }

    public OmUtilitySupplier(long supplierId, MOrganisation MOrganisation, String supplierCode, String supplierName,
            String createdBy, Date createDate, String status, String insertedBy, Date insertedTimeTs) {
        this.supplierId = supplierId;
        this.MOrganisation = MOrganisation;
        this.supplierCode = supplierCode;
        this.supplierName = supplierName;
        this.createdBy = createdBy;
        this.createDate = createDate;
        this.status = status;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
    }

    public OmUtilitySupplier(long supplierId, MOrganisation MOrganisation, String supplierCode, String supplierName,
            String createdBy, Date createDate, String status, String insertedBy, Date insertedTimeTs, Long sourceId/*
                                                                                                                    * ,
                                                                                                                    * Set
                                                                                                                    * <
                                                                                                                    * OmMeterConfig
                                                                                                                    * >
                                                                                                                    * omMeterConfigs
                                                                                                                    */) {
        this.supplierId = supplierId;
        this.MOrganisation = MOrganisation;
        this.supplierCode = supplierCode;
        this.supplierName = supplierName;
        this.createdBy = createdBy;
        this.createDate = createDate;
        this.status = status;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
        this.sourceId = sourceId;
        // this.omMeterConfigs = omMeterConfigs;
    }

    @Column(allowsNull = "false", name = "supplier_id")
    // @Persistent(primaryKey = "true", valueStrategy = IdGeneratorStrategy.SEQUENCE, sequence = "supplier_id")
    @Persistent(primaryKey = "true", valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.OBJECT_FORMS)
    public long getSupplierId() {
        return this.supplierId;
    }

    public void setSupplierId(long supplierId) {
        this.supplierId = supplierId;
    }

    @Column(allowsNull = "false", name = "org_id")
    public MOrganisation getMOrganisation() {
        return this.MOrganisation;
    }

    public void setMOrganisation(MOrganisation MOrganisation) {
        this.MOrganisation = MOrganisation;
    }

    @Column(allowsNull = "false", name = "supplier_code")
    @Title
    public String getSupplierCode() {
        return this.supplierCode;
    }

    public void setSupplierCode(String supplierCode) {
        this.supplierCode = supplierCode;
    }

    @Column(allowsNull = "false", name = "supplier_name")
    public String getSupplierName() {
        return this.supplierName;
    }

    public void setSupplierName(String supplierName) {
        this.supplierName = supplierName;
    }

    @Column(allowsNull = "false", name = "created_by")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(allowsNull = "false", name = "create_date")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @Column(allowsNull = "false", name = "status")
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(allowsNull = "false", name = "inserted_by")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getInsertedBy() {
        return this.insertedBy;
    }

    public void setInsertedBy(String insertedBy) {
        this.insertedBy = insertedBy;
    }

    @Column(allowsNull = "false", name = "inserted_time_ts")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getInsertedTimeTs() {
        return this.insertedTimeTs;
    }

    public void setInsertedTimeTs(Date insertedTimeTs) {
        this.insertedTimeTs = insertedTimeTs;
    }

    @Column(name = "source_id_")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    /*
     * public Set<OmMeterConfig> getOmMeterConfigs() { return this.omMeterConfigs; } public void
     * setOmMeterConfigs(Set<OmMeterConfig> omMeterConfigs) { this.omMeterConfigs = omMeterConfigs; }
     */
    OrganisationService orgService;

    public void injectOrganisationService(OrganisationService orgService) {
        this.orgService = orgService;
    }

    public List<MOrganisation> choicesMOrganisation() {
        return this.orgService.listAllOrganisations();
    }

    public List<String> choicesStatus() {
        List<String> statusList = new ArrayList<String>();
        statusList.add(ProvisioningConstants.ZERO + "");
        statusList.add(ProvisioningConstants.ONE + "");
        return statusList;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setCreatedBy(this.container.getUser().getName());
        this.setCreateDate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (int) (supplierId ^ (supplierId >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmUtilitySupplier other = (OmUtilitySupplier) obj;
        if (supplierId != other.supplierId)
            return false;
        return true;
    }

    private UtilityMeterService meterService;

    public void injectUtilityMeterService(UtilityMeterService meterService) {
        this.meterService = meterService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmUtilitySupplier> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.meterService.listAllUtiltySuppliers();

    }

}
