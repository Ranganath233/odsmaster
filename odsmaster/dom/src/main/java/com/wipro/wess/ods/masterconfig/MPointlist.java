package com.wipro.wess.ods.masterconfig;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.munit.MUnit;
import com.wipro.wess.ods.munit.MUnitFamily;

/**
 * MPointlist generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_pointlist", objectIdClass = MPointlistPK.class, identityType = IdentityType.APPLICATION)
public class MPointlist implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 7284686340173370333L;

    private String point;

    private MAssetclass assetclassCode;

    private MUnitFamily MUnitFamily;

    private MUnit MUnit;

    private int rowseqId;

    private String description;

    private String datapointtype;

    private String state0;

    private String state1;

    private String changeby;

    private Date changedate;

    private Long sourceId;

    private BigDecimal discardPassLow;

    private BigDecimal discardPassHigh;
    
    private String configUser;

    /*
     * private Set<OmPointlistCountryPolicy> omPointlistCountryPolicies = new HashSet<OmPointlistCountryPolicy>(0);
     * private Set<OmPointlistCountryExcept> omPointlistCountryExcepts = new HashSet<OmPointlistCountryExcept>(0);
     * private Set<OmPointpathSurr> omPointpathSurrs = new HashSet<OmPointpathSurr>(0); private
     * Set<OmPointlistSiteExcept> omPointlistSiteExcepts = new HashSet<OmPointlistSiteExcept>(0); private
     * Set<OmPointpath> omPointpaths = new HashSet<OmPointpath>(0); private Set<OmPointpathTest> omPointpathTests = new
     * HashSet<OmPointpathTest>(0); private Set<OmPointlistOrgPolicy> omPointlistOrgPolicies = new
     * HashSet<OmPointlistOrgPolicy>(0);
     */
    public MPointlist() {
    }

    public MPointlist(MAssetclass assetclassCode, int rowseqId, String datapointtype, Date changedate) {
        this.assetclassCode = assetclassCode;
        this.rowseqId = rowseqId;
        this.datapointtype = datapointtype;
        this.changedate = changedate;
    }

    public MPointlist(MAssetclass assetclassCode, MUnitFamily MUnitFamily, MUnit MUnit, int rowseqId,
            String description, String datapointtype, String state0, String state1, String changeby, Date changedate,
            Long sourceId, BigDecimal discardPassLow, BigDecimal discardPassHigh) {
        this.assetclassCode = assetclassCode;
        this.MUnitFamily = MUnitFamily;
        this.MUnit = MUnit;
        this.rowseqId = rowseqId;
        this.description = description;
        this.datapointtype = datapointtype;
        this.state0 = state0;
        this.state1 = state1;
        this.changeby = changeby;
        this.changedate = changedate;
        this.sourceId = sourceId;
        this.discardPassLow = discardPassLow;
        this.discardPassHigh = discardPassHigh;
    }

    @Column(name = "point", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public String getPoint() {
        return point;
    }

    public void setPoint(String point) {
        this.point = point;
    }

    @Column(name = "assetclass_code", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MAssetclass getAssetclassCode() {
        return assetclassCode;
    }

    public void setAssetclassCode(MAssetclass assetclassCode) {
        this.assetclassCode = assetclassCode;
    }

    @Column(name = "unit_family_id")
    @Hidden(where = Where.ALL_TABLES)
    public MUnitFamily getMUnitFamily() {
        return this.MUnitFamily;
    }

    public void setMUnitFamily(MUnitFamily MUnitFamily) {
        this.MUnitFamily = MUnitFamily;
    }

    @Column(name = "unit_id")
    @Hidden(where = Where.ALL_TABLES)
    public MUnit getMUnit() {
        return this.MUnit;
    }

    public void setMUnit(MUnit MUnit) {
        this.MUnit = MUnit;
    }

    @Column(name = "rowseq_id", allowsNull = "false")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.ANYWHERE)
    public int getRowseqId() {
        return this.rowseqId;
    }

    public void setRowseqId(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    @Column(name = "description")
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "datapointtype", allowsNull = "false")
    public String getDatapointtype() {
        return this.datapointtype;
    }

    public void setDatapointtype(String datapointtype) {
        this.datapointtype = datapointtype;
    }

    @Column(name = "state_0")
    @Hidden(where = Where.ALL_TABLES)
    public String getState0() {
        return this.state0;
    }

    public void setState0(String state0) {
        this.state0 = state0;
    }

    @Column(name = "state_1")
    @Hidden(where = Where.ALL_TABLES)
    public String getState1() {
        return this.state1;
    }

    public void setState1(String state1) {
        this.state1 = state1;
    }

    @Column(name = "changeby", allowsNull = "false")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeby() {
        return this.changeby;
    }

    public void setChangeby(String changeby) {
        this.changeby = changeby;
    }

    @Column(name = "changedate", allowsNull = "false")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangedate() {
        return this.changedate;
    }

    public void setChangedate(Date changedate) {
        this.changedate = changedate;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "discard_pass_low")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getDiscardPassLow() {
        return this.discardPassLow;
    }

    public void setDiscardPassLow(BigDecimal discardPassLow) {
        this.discardPassLow = discardPassLow;
    }

    @Column(name = "discard_pass_high")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getDiscardPassHigh() {
        return this.discardPassHigh;
    }

    public void setDiscardPassHigh(BigDecimal discardPassHigh) {
        this.discardPassHigh = discardPassHigh;
    }
    
    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private MasterConfigurationService masterConfigurationService;

    public void injectMasterConfigurationService(MasterConfigurationService masterConfigurationService) {
        this.masterConfigurationService = masterConfigurationService;
    }

    public List<MAssetclass> choicesAssetclassCode() {
        return this.masterConfigurationService.listAllAssetclass();
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(DomainObjectContainer container) {
        this.container = container;
    }

    public List<MUnit> choicesMUnit() {
        return this.container.allInstances(MUnit.class);
    }

    public List<MUnitFamily> choicesMUnitFamily() {
        return this.container.allInstances(MUnitFamily.class);
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeby(this.container.getUser().getName());
        this.setChangedate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }
    


    @Bulk
    @CssClass("x-caution")
    public List<MPointlist> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.masterConfigurationService.listAllPointList();

    }

}
