package com.wipro.wess.ods.site;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.nio.charset.Charset;
import java.util.Date;
import java.util.StringTokenizer;

import com.google.common.io.BaseEncoding;
import com.wipro.wess.ods.utils.DateUtil;

/**
 * OmSiteInfoElementId generated by hbm2java
 */
public class OmSiteInfoElementPK implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = -4784191855791252048L;

    public OmSitePK site;

    public String measurementEntityId;

    public String measureId;

    public Date startDate;

    public String valueType;
    

    public OmSiteInfoElementPK() {
    }

    public OmSiteInfoElementPK(OmSitePK site, String measurementEntityId, String measureId, Date startDate,
            String valueType) {
        this.site = site;
        this.measurementEntityId = measurementEntityId;
        this.measureId = measureId;
        this.startDate = startDate;
        this.valueType = valueType;
    }

    public OmSiteInfoElementPK(String key) {
        StringTokenizer token = new StringTokenizer(decode(key), "~");
        this.measurementEntityId = token.nextToken();
        this.measureId = token.nextToken();        
        String stDateStr = token.nextToken();
        this.startDate = DateUtil.parse(stDateStr, null);
        this.valueType = token.nextToken();
        this.site = new OmSitePK(token.nextToken());
    }

    @Override
    public String toString() {
        String stDate = DateUtil.format(this.startDate, null);
        return encode("" + this.measurementEntityId + "~" + this.measureId + "~" + stDate + "~" + this.valueType + "~" + this.site.toString());
    }

    public OmSitePK getSite() {
        return site;
    }

    public void setSite(OmSitePK site) {
        this.site = site;
    }

    public String getMeasurementEntityId() {
        return measurementEntityId;
    }

    public void setMeasurementEntityId(String measurementEntityId) {
        this.measurementEntityId = measurementEntityId;
    }

    public String getMeasureId() {
        return measureId;
    }

    public void setMeasureId(String measureId) {
        this.measureId = measureId;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public String getValueType() {
        return valueType;
    }

    public void setValueType(String valueType) {
        this.valueType = valueType;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((measureId == null) ? 0 : measureId.hashCode());
        result = prime * result + ((measurementEntityId == null) ? 0 : measurementEntityId.hashCode());
        result = prime * result + ((site == null) ? 0 : site.hashCode());
        result = prime * result + ((startDate == null) ? 0 : startDate.hashCode());
        result = prime * result + ((valueType == null) ? 0 : valueType.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmSiteInfoElementPK other = (OmSiteInfoElementPK) obj;
        if (measureId == null) {
            if (other.measureId != null)
                return false;
        } else if (!measureId.equals(other.measureId))
            return false;
        if (measurementEntityId == null) {
            if (other.measurementEntityId != null)
                return false;
        } else if (!measurementEntityId.equals(other.measurementEntityId))
            return false;
        if (site == null) {
            if (other.site != null)
                return false;
        } else if (!site.equals(other.site))
            return false;
        if (startDate == null) {
            if (other.startDate != null)
                return false;
        } else if (!startDate.equals(other.startDate))
            return false;
        if (valueType == null) {
            if (other.valueType != null)
                return false;
        } else if (!valueType.equals(other.valueType))
            return false;
        return true;
    }

    private static String encode(String str) {

        return BaseEncoding.base32().encode(str.getBytes(Charset.forName("UTF-8")));
    }

    private static String decode(String str) {
        return new String(BaseEncoding.base32().decode(str), Charset.forName("UTF-8"));
    }

}
