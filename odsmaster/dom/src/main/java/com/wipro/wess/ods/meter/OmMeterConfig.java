package com.wipro.wess.ods.meter;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.site.OmSite;
import com.wipro.wess.ods.site.OmSiteService;
import com.wipro.wess.ods.utilitymeter.OmUtilitySupplier;

/**
 * OmMeterConfig generated by hbm2java
 */
@Named("MeterConfig")
@Bookmarkable
@Audited
@ObjectType("OmMeterConfig")
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_meter_config", objectIdClass = MeterConfigPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_OmMeterConfig_by_pk", language = "JDOQL", value = "SELECT "
                + " OmMeterConfig FROM com.wipro.wess.ods.meter.OmMeterConfig OmMeterConfig "
                + " WHERE meterUid == :meterUid"),
        @javax.jdo.annotations.Query(name = "fetch_meterconfigs_by_user", language = "JPQL", value = "SELECT meter FROM com.wipro.wess.ods.meter.OmMeterConfig meter "
                + " JOIN meter.site site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
public class OmMeterConfig implements java.io.Serializable, InstanceCallbacks {

    /**
     * com.wipro.wess.ods.meter
     */
    private static final long serialVersionUID = -3000355469719009947L;

    private String meterUid;

    // private MOrganisation MOrganisation;

    private OmSite site;

    private OmUtilitySupplier omUtilitySupplier;

    private String energyidenityCode;

    private String identificationCodeType;

    private String identificationCode;

    private String unitOfMeasurement;

    private String functionalType;

    private String insertedBy;

    private Date insertedTimeTs;

    private Long sourceId;

    private String estimationEnabled;

    private String status;

    private String subtype;

    private String subtypeLvl2;

    private String configUser;

    public OmMeterConfig() {
    }

    public OmMeterConfig(String meterUid, /* MOrganisation MOrganisation, */String functionalType, String insertedBy,
            Date insertedTimeTs) {
        this.meterUid = meterUid;
        // this.MOrganisation = MOrganisation;
        this.functionalType = functionalType;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
    }

    public OmMeterConfig(String meterUid, /* MOrganisation MOrganisation, */OmUtilitySupplier omUtilitySupplier,
            String energyidenityCode, String identificationCodeType, String identificationCode,
            String unitOfMeasurement, String functionalType, String insertedBy, Date insertedTimeTs, Long sourceId,
            String estimationEnabled, String status, String subtype, String subtypeLvl2) {
        this.meterUid = meterUid;
        // this.MOrganisation = MOrganisation;
        this.omUtilitySupplier = omUtilitySupplier;
        this.energyidenityCode = energyidenityCode;
        this.identificationCodeType = identificationCodeType;
        this.identificationCode = identificationCode;
        this.unitOfMeasurement = unitOfMeasurement;
        this.functionalType = functionalType;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
        this.sourceId = sourceId;
        this.estimationEnabled = estimationEnabled;
        this.status = status;
        this.subtype = subtype;
        this.subtypeLvl2 = subtypeLvl2;
    }

    @Persistent(primaryKey = "true")
    @Column(allowsNull = "false", name = "meter_uid")
    @Title
    public String getMeterUid() {
        return this.meterUid;
    }

    public void setMeterUid(String meterUid) {
        this.meterUid = meterUid;
    }

    /*
     * @Column(allowsNull = "false", name = "org_id") public MOrganisation getMOrganisation() { return
     * this.MOrganisation; } public void setMOrganisation(MOrganisation MOrganisation) { this.MOrganisation =
     * MOrganisation; }
     */

    @Columns(value = { @Column(allowsNull = "false", name = "org_id"), @Column(name = "site_id") })
    @Optional
    public OmSite getSite() {
        return site;
    }

    public void setSite(OmSite site) {
        this.site = site;
    }

    @Column(name = "supplier_id")
    public OmUtilitySupplier getOmUtilitySupplier() {
        return this.omUtilitySupplier;
    }

    public void setOmUtilitySupplier(OmUtilitySupplier omUtilitySupplier) {
        this.omUtilitySupplier = omUtilitySupplier;
    }

    @Column(name = "energyidenity_code")
    @Hidden(where = Where.ALL_TABLES)
    public String getEnergyidenityCode() {
        return this.energyidenityCode;
    }

    public void setEnergyidenityCode(String energyidenityCode) {
        this.energyidenityCode = energyidenityCode;
    }

    @Column(name = "identification_code_type")
    @Hidden(where = Where.ALL_TABLES)
    public String getIdentificationCodeType() {
        return this.identificationCodeType;
    }

    public void setIdentificationCodeType(String identificationCodeType) {
        this.identificationCodeType = identificationCodeType;
    }

    @Column(name = "identification_code")
    @Hidden(where = Where.ALL_TABLES)
    public String getIdentificationCode() {
        return this.identificationCode;
    }

    public void setIdentificationCode(String identificationCode) {
        this.identificationCode = identificationCode;
    }

    @Column(name = "unit_of_measurement")
    @Hidden(where = Where.ALL_TABLES)
    public String getUnitOfMeasurement() {
        return this.unitOfMeasurement;
    }

    public void setUnitOfMeasurement(String unitOfMeasurement) {
        this.unitOfMeasurement = unitOfMeasurement;
    }

    @Column(allowsNull = "false", name = "functional_type")
    public String getFunctionalType() {
        return this.functionalType;
    }

    public void setFunctionalType(String functionalType) {
        this.functionalType = functionalType;
    }

    @Column(allowsNull = "false", name = "inserted_by")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getInsertedBy() {
        return this.insertedBy;
    }

    public void setInsertedBy(String insertedBy) {
        this.insertedBy = insertedBy;
    }

    @Column(allowsNull = "false", name = "inserted_time_ts")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getInsertedTimeTs() {
        return this.insertedTimeTs;
    }

    public void setInsertedTimeTs(Date insertedTimeTs) {
        this.insertedTimeTs = insertedTimeTs;
    }

    @Column(name = "source_id_")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "estimation_enabled")
    @Hidden(where = Where.ALL_TABLES)
    public String getEstimationEnabled() {
        return this.estimationEnabled;
    }

    public void setEstimationEnabled(String estimationEnabled) {
        this.estimationEnabled = estimationEnabled;
    }

    @Column(name = "status")
    @Hidden(where = Where.ALL_TABLES)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "subtype")
    @Hidden(where = Where.ALL_TABLES)
    public String getSubtype() {
        return this.subtype;
    }

    public void setSubtype(String subtype) {
        this.subtype = subtype;
    }

    @Column(name = "subtype_lvl2")
    @Hidden(where = Where.ALL_TABLES)
    public String getSubtypeLvl2() {
        return this.subtypeLvl2;
    }

    public void setSubtypeLvl2(String subtypeLvl2) {
        this.subtypeLvl2 = subtypeLvl2;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private OmSiteService siteService;

    public void injectOmSiteService(OmSiteService siteService) {
        this.siteService = siteService;
    }

    public List<OmSite> choicesSite() {
        return this.siteService.listAllSites();
    }

    public List<String> choicesFunctionalType() {
        List<String> functionalTypes = new ArrayList<String>();
        functionalTypes.add(FunctionalType.OM.name());
        functionalTypes.add(FunctionalType.UM.name());
        return functionalTypes;
    }

    public static enum FunctionalType {
        UM,
        OM;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((meterUid == null) ? 0 : meterUid.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmMeterConfig other = (OmMeterConfig) obj;
        if (meterUid == null) {
            if (other.meterUid != null)
                return false;
        } else if (!meterUid.equals(other.meterUid))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private OmMeterConfigService meterConfigService;

    public void injectOmMeterConfigService(OmMeterConfigService meterConfigService) {
        this.meterConfigService = meterConfigService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmMeterConfig> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.meterConfigService.listAllMeterConfigs();

    }

}
