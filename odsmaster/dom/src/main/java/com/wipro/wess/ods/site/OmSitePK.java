package com.wipro.wess.ods.site;

import java.nio.charset.Charset;
import java.util.StringTokenizer;

import com.google.common.io.BaseEncoding;
import com.wipro.wess.ods.organisation.OrganisationPK;
import com.wipro.wess.ods.upload.ProvisioningConstants;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

/**
 * OmSiteId generated by hbm2java
 */
public class OmSitePK implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2652996297371236714L;
	public String siteId;
	public OrganisationPK orgId;
	
	public OmSitePK(String key){
		StringTokenizer token = new StringTokenizer(decode(key), ProvisioningConstants.DOMAIN_OBJ_SEPERATOR);
		this.siteId = token.nextToken();
		this.orgId = new OrganisationPK(token.nextToken());
	}

	public OmSitePK() {
	}

	public OmSitePK(String siteId, OrganisationPK orgId) {
		this.siteId = siteId;
		this.orgId = orgId;
	}

	public String getSiteId() {
		return this.siteId;
	}

	public void setSiteId(String siteId) {
		this.siteId = siteId;
	}

	public OrganisationPK getOrgId() {
		return this.orgId;
	}

	public void setOrgId(OrganisationPK orgId) {
		this.orgId = orgId;
	}

	
	@Override
	public String toString() {	    
		return encode("" + siteId  + ProvisioningConstants.DOMAIN_OBJ_SEPERATOR + orgId.toString());
	    
	    //return ("" + siteId + "-" + orgId.toString());
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((orgId == null) ? 0 : orgId.hashCode());
		result = prime * result + ((siteId == null) ? 0 : siteId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		OmSitePK other = (OmSitePK) obj;
		if (orgId == null) {
			if (other.orgId != null)
				return false;
		} else if (!orgId.equals(other.orgId))
			return false;
		if (siteId == null) {
			if (other.siteId != null)
				return false;
		} else if (!siteId.equals(other.siteId))
			return false;
		return true;
	}

    private static String encode(String str) {        
        
        return BaseEncoding.base32().encode(str.getBytes(Charset.forName("UTF-8")));
    }

    private static String decode(String str) {
        return new String(BaseEncoding.base32().decode(str), Charset.forName("UTF-8"));
    }


}
