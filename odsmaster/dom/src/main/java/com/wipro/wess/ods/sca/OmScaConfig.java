package com.wipro.wess.ods.sca;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Mandatory;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.site.OmSite;
import com.wipro.wess.ods.site.OmSiteService;

/**
 * OmScaConfig generated by hbm2java
 */
@Named("SCA")
@Bookmarkable
@Audited
@ObjectType("OmScaConfig")
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_sca_config", objectIdClass = ScaConfigPK.class, identityType = IdentityType.APPLICATION)
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_OmScaConfig_by_pk", language = "JDOQL", value = "SELECT "
                + " OmScaConfig FROM com.wipro.wess.ods.sca.OmScaConfig OmScaConfig WHERE scaUid == :scaUid"),
        @javax.jdo.annotations.Query(name = "fetch_scaconfigs_by_user", language = "JPQL", value = "SELECT sca FROM com.wipro.wess.ods.sca.OmScaConfig sca "
                + " JOIN sca.omSite site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
public class OmScaConfig implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 4515488843670792324L;

    private String scaUid;

    private OmSite omSite;

    private String scaName;

    private String description;

    private String status;

    private String areaType;

    private BigDecimal highTempLimit;

    private BigDecimal lowTempLimit;

    private BigDecimal fcHighTempLimit;

    private BigDecimal fcLowTempLimit;

    private BigDecimal overcoolingThresholdPercent;

    private BigDecimal undercoolingThresholdPercent;

    private BigDecimal adjustTempBand;

    private BigDecimal highRhLimit;

    private BigDecimal lowRhLimit;

    private BigDecimal suboptThermalDeviation;

    private Integer heatingProfileOffset;

    private Integer coolingProfileOffset;

    private String subtypeLvl2;

    private String changeBy;

    private Date changeDt;

    private Set<OmScaConfigExtAttr> scaConfigExtAttrs = new HashSet<OmScaConfigExtAttr>();

    private String configUser;

    /*
     * private Set<OmMsaScaMap> omMsaScaMaps = new HashSet<OmMsaScaMap>(0); private Set<OmScaLceMap> omScaLceMaps = new
     * HashSet<OmScaLceMap>(0); private Set<OmScaServiceMap> omScaServiceMaps = new HashSet<OmScaServiceMap>(0);
     */

    public OmScaConfig() {
    }

    public OmScaConfig(String scaUid, OmSite omSite, String scaName, String changeBy, Date changeDt) {
        this.scaUid = scaUid;
        this.omSite = omSite;
        this.scaName = scaName;
        this.changeBy = changeBy;
        this.changeDt = changeDt;
    }

    public OmScaConfig(String scaUid, OmSite omSite, String scaName, String description, String status,
            String areaType, BigDecimal highTempLimit, BigDecimal lowTempLimit, BigDecimal fcHighTempLimit,
            BigDecimal fcLowTempLimit, BigDecimal overcoolingThresholdPercent, BigDecimal undercoolingThresholdPercent,
            BigDecimal adjustTempBand, BigDecimal highRhLimit, BigDecimal lowRhLimit,
            BigDecimal suboptThermalDeviation, Integer heatingProfileOffset, Integer coolingProfileOffset,
            String subtypeLvl2, String changeBy, Date changeDt/*
                                                               * , Set<OmMsaScaMap> omMsaScaMaps, Set<OmScaLceMap>
                                                               * omScaLceMaps, Set<OmScaServiceMap> omScaServiceMaps
                                                               */) {
        this.scaUid = scaUid;
        this.omSite = omSite;
        this.scaName = scaName;
        this.description = description;
        this.status = status;
        this.areaType = areaType;
        this.highTempLimit = highTempLimit;
        this.lowTempLimit = lowTempLimit;
        this.fcHighTempLimit = fcHighTempLimit;
        this.fcLowTempLimit = fcLowTempLimit;
        this.overcoolingThresholdPercent = overcoolingThresholdPercent;
        this.undercoolingThresholdPercent = undercoolingThresholdPercent;
        this.adjustTempBand = adjustTempBand;
        this.highRhLimit = highRhLimit;
        this.lowRhLimit = lowRhLimit;
        this.suboptThermalDeviation = suboptThermalDeviation;
        this.heatingProfileOffset = heatingProfileOffset;
        this.coolingProfileOffset = coolingProfileOffset;
        this.subtypeLvl2 = subtypeLvl2;
        this.changeBy = changeBy;
        this.changeDt = changeDt;
        /*
         * this.omMsaScaMaps = omMsaScaMaps; this.omScaLceMaps = omScaLceMaps; this.omScaServiceMaps = omScaServiceMaps;
         */
    }

    @Column(allowsNull = "false", name = "sca_uid")
    @Title
    @Persistent(primaryKey = "true")
    public String getScaUid() {
        return this.scaUid;
    }

    public void setScaUid(String scaUid) {
        this.scaUid = scaUid;
    }

    @Columns({ @Column(allowsNull = "false", name = "org_id"), @Column(allowsNull = "false", name = "site_id") })
    @Mandatory
    public OmSite getOmSite() {
        return this.omSite;
    }

    public void setOmSite(OmSite omSite) {
        this.omSite = omSite;
    }

    @Column(allowsNull = "false", name = "sca_name")
    @Hidden(where = Where.ALL_TABLES)
    public String getScaName() {
        return this.scaName;
    }

    public void setScaName(String scaName) {
        this.scaName = scaName;
    }

    @Column(name = "description")
    @Hidden(where = Where.ALL_TABLES)
    @Optional
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "status")
    @Hidden(where = Where.ALL_TABLES)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "area_type")
    @Hidden(where = Where.ALL_TABLES)
    public String getAreaType() {
        return this.areaType;
    }

    public void setAreaType(String areaType) {
        this.areaType = areaType;
    }

    @Column(name = "high_temp_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getHighTempLimit() {
        return this.highTempLimit;
    }

    public void setHighTempLimit(BigDecimal highTempLimit) {
        this.highTempLimit = highTempLimit;
    }

    @Column(name = "low_temp_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getLowTempLimit() {
        return this.lowTempLimit;
    }

    public void setLowTempLimit(BigDecimal lowTempLimit) {
        this.lowTempLimit = lowTempLimit;
    }

    @Column(name = "fc_high_temp_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getFcHighTempLimit() {
        return this.fcHighTempLimit;
    }

    public void setFcHighTempLimit(BigDecimal fcHighTempLimit) {
        this.fcHighTempLimit = fcHighTempLimit;
    }

    @Column(name = "fc_low_temp_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getFcLowTempLimit() {
        return this.fcLowTempLimit;
    }

    public void setFcLowTempLimit(BigDecimal fcLowTempLimit) {
        this.fcLowTempLimit = fcLowTempLimit;
    }

    @Column(name = "overcooling_threshold_percent")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getOvercoolingThresholdPercent() {
        return this.overcoolingThresholdPercent;
    }

    public void setOvercoolingThresholdPercent(BigDecimal overcoolingThresholdPercent) {
        this.overcoolingThresholdPercent = overcoolingThresholdPercent;
    }

    @Column(name = "undercooling_threshold_percent")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getUndercoolingThresholdPercent() {
        return this.undercoolingThresholdPercent;
    }

    public void setUndercoolingThresholdPercent(BigDecimal undercoolingThresholdPercent) {
        this.undercoolingThresholdPercent = undercoolingThresholdPercent;
    }

    @Column(name = "adjust_temp_band")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getAdjustTempBand() {
        return this.adjustTempBand;
    }

    public void setAdjustTempBand(BigDecimal adjustTempBand) {
        this.adjustTempBand = adjustTempBand;
    }

    @Column(name = "high_rh_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getHighRhLimit() {
        return this.highRhLimit;
    }

    public void setHighRhLimit(BigDecimal highRhLimit) {
        this.highRhLimit = highRhLimit;
    }

    @Column(name = "low_rh_limit")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getLowRhLimit() {
        return this.lowRhLimit;
    }

    public void setLowRhLimit(BigDecimal lowRhLimit) {
        this.lowRhLimit = lowRhLimit;
    }

    @Column(name = "subopt_thermal_deviation")
    @Hidden(where = Where.ALL_TABLES)
    public BigDecimal getSuboptThermalDeviation() {
        return this.suboptThermalDeviation;
    }

    public void setSuboptThermalDeviation(BigDecimal suboptThermalDeviation) {
        this.suboptThermalDeviation = suboptThermalDeviation;
    }

    @Column(name = "heating_profile_offset")
    @Hidden(where = Where.ALL_TABLES)
    public Integer getHeatingProfileOffset() {
        return this.heatingProfileOffset;
    }

    public void setHeatingProfileOffset(Integer heatingProfileOffset) {
        this.heatingProfileOffset = heatingProfileOffset;
    }

    @Column(name = "cooling_profile_offset")
    @Hidden(where = Where.ALL_TABLES)
    public Integer getCoolingProfileOffset() {
        return this.coolingProfileOffset;
    }

    public void setCoolingProfileOffset(Integer coolingProfileOffset) {
        this.coolingProfileOffset = coolingProfileOffset;
    }

    @Column(name = "subtype_lvl2")
    @Hidden(where = Where.ALL_TABLES)
    public String getSubtypeLvl2() {
        return this.subtypeLvl2;
    }

    public void setSubtypeLvl2(String subtypeLvl2) {
        this.subtypeLvl2 = subtypeLvl2;
    }

    @Column(allowsNull = "false", name = "change_by")
    @Hidden(where = Where.OBJECT_FORMS)
    public String getChangeBy() {
        return this.changeBy;
    }

    public void setChangeBy(String changeBy) {
        this.changeBy = changeBy;
    }

    @Column(allowsNull = "false", name = "change_dt")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDt() {
        return this.changeDt;
    }

    public void setChangeDt(Date changeDt) {
        this.changeDt = changeDt;
    }

    @Persistent(mappedBy = "scaUid", dependentElement = "true")
    public Set<OmScaConfigExtAttr> getScaConfigExtAttrs() {
        return scaConfigExtAttrs;
    }

    public void setScaConfigExtAttrs(Set<OmScaConfigExtAttr> scaConfigExtAttrs) {
        this.scaConfigExtAttrs = scaConfigExtAttrs;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((scaUid == null) ? 0 : scaUid.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmScaConfig other = (OmScaConfig) obj;
        if (scaUid == null) {
            if (other.scaUid != null)
                return false;
        } else if (!scaUid.equals(other.scaUid))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return this.scaUid;
    }

    private OmSiteService siteService;

    public void injectOmSiteService(OmSiteService siteService) {
        this.siteService = siteService;
    }

    public List<OmSite> choicesOmSite() {
        return this.siteService.listAllSites();
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeBy(this.container.getUser().getName());
        this.setChangeDt(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    /*
     * public Set<OmMsaScaMap> getOmMsaScaMaps() { return this.omMsaScaMaps; } public void
     * setOmMsaScaMaps(Set<OmMsaScaMap> omMsaScaMaps) { this.omMsaScaMaps = omMsaScaMaps; } public Set<OmScaLceMap>
     * getOmScaLceMaps() { return this.omScaLceMaps; } public void setOmScaLceMaps(Set<OmScaLceMap> omScaLceMaps) {
     * this.omScaLceMaps = omScaLceMaps; } public Set<OmScaServiceMap> getOmScaServiceMaps() { return
     * this.omScaServiceMaps; } public void setOmScaServiceMaps(Set<OmScaServiceMap> omScaServiceMaps) {
     * this.omScaServiceMaps = omScaServiceMaps; }
     */

    private OmScaConfigService scaConfigService;

    public void injectOmScaConfigService(OmScaConfigService scaConfigService) {
        this.scaConfigService = scaConfigService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmScaConfig> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.scaConfigService.listAllScaConfigs();

    }
}
