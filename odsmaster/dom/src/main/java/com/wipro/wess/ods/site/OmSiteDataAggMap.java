package com.wipro.wess.ods.site;

import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.Mandatory;
import org.apache.isis.applib.annotation.ObjectType;
// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Where;

/**
 * OmSiteDataAggMap generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_site_data_agg_map", objectIdClass = OmSiteDataAggMapPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name = "fetch_sitedataaggmap_by_user", language = "JPQL", value = "SELECT siteagg FROM com.wipro.wess.ods.site.OmSiteDataAggMap siteagg "
        + " JOIN siteagg.omSite site WHERE EXISTS "
        + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
        + " (SELECT "
        + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
        + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) "), })
@Audited
@ObjectType("OmSiteDataAggMap")
@Bookmarkable
public class OmSiteDataAggMap implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    private OmSite omSite;

    private String dataAggName;

    private String ipAddress;

    private int port;

    private OmSiteService siteService;

    private String configUser;

    public OmSiteDataAggMap() {
    }

    public OmSiteDataAggMap(OmSite omSite, String ipAddress, int port) {
        this.omSite = omSite;
        this.ipAddress = ipAddress;
        this.port = port;
    }

    public OmSiteDataAggMap(OmSite omSite, String dataAggName, String ipAddress, int port) {
        this.omSite = omSite;
        this.dataAggName = dataAggName;
        this.ipAddress = ipAddress;
        this.port = port;
    }

    @Columns({ @Column(allowsNull = "false", name = "org_id"), @Column(allowsNull = "false", name = "site_id") })
    @Mandatory
    @Persistent(primaryKey = "true")
    public OmSite getOmSite() {
        return this.omSite;
    }

    public void setOmSite(OmSite omSite) {
        this.omSite = omSite;
    }

    @Column(name = "data_agg_name")
    @Optional
    public String getDataAggName() {
        return this.dataAggName;
    }

    public void setDataAggName(String dataAggName) {
        this.dataAggName = dataAggName;
    }

    @Column(allowsNull = "false", name = "ip_address")
    public String getIpAddress() {
        return this.ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    @Column(allowsNull = "false", name = "port")
    public int getPort() {
        return this.port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public void injectOmSiteService(OmSiteService siteService) {
        this.siteService = siteService;
    }

    public List<OmSite> choicesOmSite() {
        return this.siteService.listAllSites();
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmSiteDataAggMap> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.siteService.listAllSiteDataAggMap();

    }

}
