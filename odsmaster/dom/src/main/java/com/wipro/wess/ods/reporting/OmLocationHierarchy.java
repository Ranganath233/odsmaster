package com.wipro.wess.ods.reporting;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.Columns;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.organisation.MOrganisation;
import com.wipro.wess.ods.site.OmSite;

/**
 * OmLocationHierarchy generated by hbm2java
 */
@javax.jdo.annotations.Queries({
        @javax.jdo.annotations.Query(name = "fetch_locationhierarchy_by_location_and_org", language = "JDOQL", value = "SELECT "
                + " locationHierarchy FROM com.wipro.wess.ods.reporting.OmLocationHierarchy locationHierarchy "
                + " WHERE organisation.orgId == :orgId && locationHierarchy.locationUid == :locationId"),
        @javax.jdo.annotations.Query(name = "fetch_lochcy_by_user", language = "JPQL", value = "SELECT loc_hcy FROM com.wipro.wess.ods.reporting.OmLocationHierarchy loc_hcy "
                + " JOIN loc_hcy.omSite site WHERE EXISTS "
                + " (SELECT 1 FROM com.wipro.wess.pdm.security.OmPermission permission WHERE permission.site = site AND permission IN "
                + " (SELECT "
                + " OmRolesPermissions.permission FROM com.wipro.wess.pdm.security.OmRolesPermissions OmRolesPermissions "
                + " WHERE role IN ( SELECT OmUsersRoles.role FROM com.wipro.wess.pdm.security.OmUsersRoles OmUsersRoles WHERE OmUsersRoles.user.userName = :userName) ) ) ") })
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "om_location_hierarchy", objectIdClass = OmLocationHierarchyPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@Audited
@Bookmarkable
@ObjectType("OmLocationHierarchy")
public class OmLocationHierarchy implements java.io.Serializable, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = 9125170044739398864L;

    private String locationUid;

    private MOrganisation organisation;

    private int rowseqId;

    private String continent;

    private String continentName;

    private String country;

    private String countryName;

    private String region1;

    private String region1Name;

    private String region2;

    private String region2Name;

    private String city;

    private String cityName;

    private String siteName;

    private String subSite;

    private String subSiteName;

    private String subsiteFlg;

    private Long sourceId;

    private String changeby;

    private Date changedate;

    private Long loadbatch;

    private Date loaddate;

    private String configUser;

    /*
     * private Set<TtDigitalassetUpload> ttDigitalassetUploads = new HashSet<TtDigitalassetUpload>(0); private
     * Set<OmPointpathSurr> omPointpathSurrs = new HashSet<OmPointpathSurr>(0); private Set<Tttt> tttts = new
     * HashSet<Tttt>(0); private Set<OmDiPointpathMapping> omDiPointpathMappings = new HashSet<OmDiPointpathMapping>(0);
     * private Set<OmPointpath> omPointpaths = new HashSet<OmPointpath>(0); private Set<OmAsset> omAssets = new
     * HashSet<OmAsset>(0); private Set<OmPointpathTest> omPointpathTests = new HashSet<OmPointpathTest>(0);
     */
    private OmSite omSite;

    public OmLocationHierarchy() {
    }

    public OmLocationHierarchy(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    public OmLocationHierarchy(int rowseqId, String continent, String continentName, String country,
            String countryName, String region1, String region1Name, String region2, String region2Name, String city,
            String cityName, String siteName, String subSite, String subSiteName, String subsiteFlg, Long sourceId,
            String changeby, Date changedate, Long loadbatch, Date loaddate/*
                                                                            * , Set<TtDigitalassetUpload>
                                                                            * ttDigitalassetUploads,
                                                                            * Set<OmPointpathSurr> omPointpathSurrs,
                                                                            * Set<Tttt> tttts, Set<OmDiPointpathMapping>
                                                                            * omDiPointpathMappings, Set<OmPointpath>
                                                                            * omPointpaths, Set<OmAsset> omAssets,
                                                                            * Set<OmPointpathTest> omPointpathTests
                                                                            */) {
        this.rowseqId = rowseqId;
        this.continent = continent;
        this.continentName = continentName;
        this.country = country;
        this.countryName = countryName;
        this.region1 = region1;
        this.region1Name = region1Name;
        this.region2 = region2;
        this.region2Name = region2Name;
        this.city = city;
        this.cityName = cityName;
        this.siteName = siteName;
        this.subSite = subSite;
        this.subSiteName = subSiteName;
        this.subsiteFlg = subsiteFlg;
        this.sourceId = sourceId;
        this.changeby = changeby;
        this.changedate = changedate;
        this.loadbatch = loadbatch;
        this.loaddate = loaddate;
        /*
         * this.ttDigitalassetUploads = ttDigitalassetUploads; this.omPointpathSurrs = omPointpathSurrs; this.tttts =
         * tttts; this.omDiPointpathMappings = omDiPointpathMappings; this.omPointpaths = omPointpaths; this.omAssets =
         * omAssets; this.omPointpathTests = omPointpathTests;
         */
    }

    @Persistent(primaryKey = "true")
    @Column(allowsNull = "false", name = "location_uid")
    @Title
    public String getLocationUid() {
        return locationUid;
    }

    public void setLocationUid(String locationUid) {
        this.locationUid = locationUid;
    }

    @Persistent(primaryKey = "true", dependent = "false")
    @Column(allowsNull = "false", name = "org_id")
    @Title
    public MOrganisation getOrganisation() {
        return organisation;
    }

    public void setOrganisation(MOrganisation organisation) {
        this.organisation = organisation;
    }

    @Column(allowsNull = "false", name = "rowseq_id")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    public int getRowseqId() {
        return this.rowseqId;
    }

    public void setRowseqId(int rowseqId) {
        this.rowseqId = rowseqId;
    }

    @Column(name = "continent")
    @Optional
    public String getContinent() {
        return this.continent;
    }

    public void setContinent(String continent) {
        this.continent = continent;
    }

    @Column(name = "continent_name")
    @Optional
    public String getContinentName() {
        return this.continentName;
    }

    public void setContinentName(String continentName) {
        this.continentName = continentName;
    }

    @Column(name = "country")
    @Optional
    public String getCountry() {
        return this.country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    @Column(name = "country_name")
    @Optional
    public String getCountryName() {
        return this.countryName;
    }

    public void setCountryName(String countryName) {
        this.countryName = countryName;
    }

    @Column(name = "region1")
    @Optional
    public String getRegion1() {
        return this.region1;
    }

    public void setRegion1(String region1) {
        this.region1 = region1;
    }

    @Column(name = "region1_name")
    @Optional
    public String getRegion1Name() {
        return this.region1Name;
    }

    public void setRegion1Name(String region1Name) {
        this.region1Name = region1Name;
    }

    @Column(name = "region2")
    @Optional
    public String getRegion2() {
        return this.region2;
    }

    public void setRegion2(String region2) {
        this.region2 = region2;
    }

    @Column(name = "region2_name")
    @Optional
    public String getRegion2Name() {
        return this.region2Name;
    }

    public void setRegion2Name(String region2Name) {
        this.region2Name = region2Name;
    }

    @Column(name = "city")
    @Optional
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "city_name")
    @Optional
    public String getCityName() {
        return this.cityName;
    }

    public void setCityName(String cityName) {
        this.cityName = cityName;
    }

    @Column(name = "site_name")
    @Optional
    public String getSiteName() {
        return this.siteName;
    }

    public void setSiteName(String siteName) {
        this.siteName = siteName;
    }

    @Column(name = "sub_site")
    @Optional
    public String getSubSite() {
        return this.subSite;
    }

    public void setSubSite(String subSite) {
        this.subSite = subSite;
    }

    @Column(name = "sub_site_name")
    @Optional
    public String getSubSiteName() {
        return this.subSiteName;
    }

    public void setSubSiteName(String subSiteName) {
        this.subSiteName = subSiteName;
    }

    @Column(name = "subsite_flg")
    @Optional
    public String getSubsiteFlg() {
        return this.subsiteFlg;
    }

    public void setSubsiteFlg(String subsiteFlg) {
        this.subsiteFlg = subsiteFlg;
    }

    @Column(name = "source_id")
    @Optional
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "changeby")
    @Optional
    public String getChangeby() {
        return this.changeby;
    }

    public void setChangeby(String changeby) {
        this.changeby = changeby;
    }

    @Column(name = "changedate")
    @Optional
    public Date getChangedate() {
        return this.changedate;
    }

    public void setChangedate(Date changedate) {
        this.changedate = changedate;
    }

    @Column(name = "loadbatch")
    @Optional
    public Long getLoadbatch() {
        return this.loadbatch;
    }

    public void setLoadbatch(Long loadbatch) {
        this.loadbatch = loadbatch;
    }

    @Column(name = "loaddate")
    @Optional
    public Date getLoaddate() {
        return this.loaddate;
    }

    public void setLoaddate(Date loaddate) {
        this.loaddate = loaddate;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    /*
     * public Set<TtDigitalassetUpload> getTtDigitalassetUploads() { return this.ttDigitalassetUploads; } public void
     * setTtDigitalassetUploads(Set<TtDigitalassetUpload> ttDigitalassetUploads) { this.ttDigitalassetUploads =
     * ttDigitalassetUploads; }
     */

    /*
     * public Set<OmPointpathSurr> getOmPointpathSurrs() { return this.omPointpathSurrs; } public void
     * setOmPointpathSurrs(Set<OmPointpathSurr> omPointpathSurrs) { this.omPointpathSurrs = omPointpathSurrs; }
     */
    /*
     * public Set<Tttt> getTttts() { return this.tttts; } public void setTttts(Set<Tttt> tttts) { this.tttts = tttts; }
     */

    /*
     * public Set<OmDiPointpathMapping> getOmDiPointpathMappings() { return this.omDiPointpathMappings; } public void
     * setOmDiPointpathMappings(Set<OmDiPointpathMapping> omDiPointpathMappings) { this.omDiPointpathMappings =
     * omDiPointpathMappings; } public Set<OmPointpath> getOmPointpaths() { return this.omPointpaths; } public void
     * setOmPointpaths(Set<OmPointpath> omPointpaths) { this.omPointpaths = omPointpaths; } public Set<OmAsset>
     * getOmAssets() { return this.omAssets; } public void setOmAssets(Set<OmAsset> omAssets) { this.omAssets =
     * omAssets; } public Set<OmPointpathTest> getOmPointpathTests() { return this.omPointpathTests; } public void
     * setOmPointpathTests(Set<OmPointpathTest> omPointpathTests) { this.omPointpathTests = omPointpathTests; }
     */
    @Persistent(dependent = "false")
    @Columns(value = { @Column(name = "site", target = "site_id"), @Column(name = "site_org_id", target = "org_id") })
    @Optional
    public OmSite getOmSite() {
        return omSite;
    }

    public void setOmSite(OmSite omSite) {
        this.omSite = omSite;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((locationUid == null) ? 0 : locationUid.hashCode());
        result = prime * result + ((organisation == null) ? 0 : organisation.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OmLocationHierarchy other = (OmLocationHierarchy) obj;
        if (locationUid == null) {
            if (other.locationUid != null)
                return false;
        } else if (!locationUid.equals(other.locationUid))
            return false;
        if (organisation == null) {
            if (other.organisation != null)
                return false;
        } else if (!organisation.equals(other.organisation))
            return false;
        return true;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeby(this.container.getUser().getName());
        this.setChangedate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private OmLocationHierarchyService locationHierarchyService;

    public void injectOmLocationHierarchyService(OmLocationHierarchyService locationHierarchyService) {
        this.locationHierarchyService = locationHierarchyService;
    }

    @Bulk
    @CssClass("x-caution")
    public List<OmLocationHierarchy> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.locationHierarchyService.listAll();

    }

}
