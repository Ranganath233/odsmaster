package com.wipro.wess.ods.uom;

// Generated Jan 7, 2014 12:15:31 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.List;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;

import com.wipro.wess.ods.munit.MUnit;
import com.wipro.wess.ods.munit.MUnitFamily;

/**
 * MUomDefaults generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_uom_defaults", objectIdClass = UOMDefaultsPK.class, identityType = IdentityType.APPLICATION)
@Audited
@Bookmarkable
@ObjectType("MUomDefaults")
public class MUomDefaults implements java.io.Serializable, InstanceCallbacks {

    /**
     * 
     */
    private static final long serialVersionUID = 3269222265951366659L;

    private MMeasurementEntity measureEntityId;

    private MMeasurement measureId;

    private MUnitFamily MUnitFamily;

    private MUnit MUnit;

    private int recordId;

    private Date changeDate;

    private Long sourceId;

    private String configUser;

    // private Set<MDomainParamMap> MDomainParamMaps = new HashSet<MDomainParamMap>(0);

    public MUomDefaults() {
    }

    public MUomDefaults(MUnitFamily MUnitFamily, MUnit MUnit, int recordId, Date changeDate) {
        this.MUnitFamily = MUnitFamily;
        this.MUnit = MUnit;
        this.recordId = recordId;
        this.changeDate = changeDate;
    }

    public MUomDefaults(MUnitFamily MUnitFamily, MUnit MUnit, int recordId, Date changeDate, Long sourceId) {
        this.MUnitFamily = MUnitFamily;
        this.MUnit = MUnit;
        this.recordId = recordId;
        this.changeDate = changeDate;
        this.sourceId = sourceId;
    }

    @Column(name = "measure_entity_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MMeasurementEntity getMeasureEntityId() {
        return measureEntityId;
    }

    public void setMeasureEntityId(MMeasurementEntity measureEntityId) {
        this.measureEntityId = measureEntityId;
    }

    @Column(name = "measure_id", allowsNull = "false")
    @Persistent(primaryKey = "true")
    @Title
    public MMeasurement getMeasureId() {
        return measureId;
    }

    public void setMeasureId(MMeasurement measureId) {
        this.measureId = measureId;
    }

    @Column(name = "unit_family_id", allowsNull = "false")
    public MUnitFamily getMUnitFamily() {
        return this.MUnitFamily;
    }

    public void setMUnitFamily(MUnitFamily MUnitFamily) {
        this.MUnitFamily = MUnitFamily;
    }

    @Column(name = "unit_id", allowsNull = "false")
    public MUnit getMUnit() {
        return this.MUnit;
    }

    public void setMUnit(MUnit MUnit) {
        this.MUnit = MUnit;
    }

    @Column(name = "record_id", allowsNull = "false")
    @Persistent(valueStrategy = IdGeneratorStrategy.INCREMENT)
    @Hidden(where = Where.OBJECT_FORMS)
    public int getRecordId() {
        return this.recordId;
    }

    public void setRecordId(int recordId) {
        this.recordId = recordId;
    }

    @Column(name = "change_date", allowsNull = "false")
    @Hidden(where = Where.OBJECT_FORMS)
    public Date getChangeDate() {
        return this.changeDate;
    }

    public void setChangeDate(Date changeDate) {
        this.changeDate = changeDate;
    }

    @Column(name = "source_id")
    @Hidden(where = Where.ALL_TABLES)
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public List<MMeasurementEntity> choicesMeasureEntityId() {
        return this.container.allInstances(MMeasurementEntity.class);
    }

    public List<MMeasurement> choicesMeasureId() {
        return this.container.allInstances(MMeasurement.class);
    }

    public List<MUnitFamily> choicesMUnitFamily() {
        return this.container.allInstances(MUnitFamily.class);
    }

    public List<MUnit> choicesMUnit() {
        return this.container.allInstances(MUnit.class);
    }

    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setChangeDate(new Date());
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

    private UOMService uomService;

    public void injectUOMService(UOMService uomService) {
        this.uomService = uomService;
    }
    
    @Bulk
    @CssClass("x-caution")
    public List<MUomDefaults> delete() {
        this.container.removeIfNotAlready(this);
        this.container.informUser("Deleted " + container.titleOf(this));
        return this.uomService.listAllUOMDefaults();

    }
}
