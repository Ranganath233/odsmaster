package com.wipro.wess.ods.masterconfig;

// Generated Dec 19, 2013 5:56:26 PM by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.jdo.InstanceCallbacks;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.Sequence;
import javax.jdo.annotations.SequenceStrategy;

import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.Audited;
import org.apache.isis.applib.annotation.Bookmarkable;
import org.apache.isis.applib.annotation.Bulk;
import org.apache.isis.applib.annotation.CssClass;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.annotation.Title;
import org.apache.isis.applib.annotation.Where;
import org.apache.isis.applib.util.ObjectContracts;

import com.wipro.wess.ods.organisation.OmOrgSrefName;

/**
 * MSourcetypeConfig generated by hbm2java
 */
@javax.jdo.annotations.PersistenceCapable(schema = "gemsods", table = "m_sourcetype_config", objectIdClass = MSourcetypeConfigPK.class, identityType = IdentityType.APPLICATION)
// @javax.jdo.annotations.Version(strategy = VersionStrategy.VERSION_NUMBER,
// column = "version")
@javax.jdo.annotations.Queries({ @javax.jdo.annotations.Query(name = "fetch_MSourcetypeConfig_by_pk", language = "JDOQL", value = "SELECT "
        + " MSourcetypeConfig FROM com.wipro.wess.ods.masterconfig.MSourcetypeConfig MSourcetypeConfig "
        + " WHERE typeCode == :sourceTypeCode") })
@Audited
@ObjectType("MSourcetypeConfig")
@Bookmarkable
@Sequence(name = "sourcetype_id", datastoreSequence = "sourcetype_id", strategy = SequenceStrategy.CONTIGUOUS)
public class MSourcetypeConfig implements java.io.Serializable, Comparable<MSourcetypeConfig>, InstanceCallbacks {

    /**
	 * 
	 */
    private static final long serialVersionUID = 6331012455702173837L;

    private Long sourcetypeId;

    private String typeCode;

    private String displayName;

    private String description;

    private String insertedBy;

    private Date insertedTimeTs;

    private Long sourceId;
    
    private String configUser;

    /*
     * private Set omMsaConsStFrs = new HashSet(0); private Set omSourceidentities = new HashSet(0); private Set
     * omSiteSrefFormulas = new HashSet(0); private Set omMsaConsFrs = new HashSet(0); private Set omMsaConsStsubtFrs =
     * new HashSet(0); private Set omOrgSrefNames = new HashSet(0);
     */
    private Set<OmOrgSrefName> omOrgSrefNames = new HashSet<OmOrgSrefName>(0);

    // //////////////////////////////////////
    // Injected
    // //////////////////////////////////////

    private DomainObjectContainer container;

    public void injectDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    private MSourcetypeConfigs mSourcetypeConfigs;

    public void injectOmOrgSrefNames(MSourcetypeConfigs mSourcetypeConfigs) {
        this.mSourcetypeConfigs = mSourcetypeConfigs;
    }

    public MSourcetypeConfig() {
    }

    public MSourcetypeConfig(Long sourcetypeId, String typeCode, String displayName, String insertedBy,
            Date insertedTimeTs) {
        this.sourcetypeId = sourcetypeId;
        this.typeCode = typeCode;
        this.displayName = displayName;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
    }

    public MSourcetypeConfig(Long sourcetypeId, String typeCode, String displayName, String description,
            String insertedBy, Date insertedTimeTs, Long sourceId, Set<OmOrgSrefName> omOrgSrefNames/*
                                                                                                     * , Set
                                                                                                     * omMsaConsStFrs,
                                                                                                     * Set
                                                                                                     * omSourceidentities
                                                                                                     * , Set
                                                                                                     * omSiteSrefFormulas
                                                                                                     * , Set
                                                                                                     * omMsaConsFrs, Set
                                                                                                     * omMsaConsStsubtFrs
                                                                                                     */) {
        this.sourcetypeId = sourcetypeId;
        this.typeCode = typeCode;
        this.displayName = displayName;
        this.description = description;
        this.insertedBy = insertedBy;
        this.insertedTimeTs = insertedTimeTs;
        this.sourceId = sourceId;
        this.omOrgSrefNames = omOrgSrefNames;
        /*
         * this.omMsaConsStFrs = omMsaConsStFrs; this.omSourceidentities = omSourceidentities; this.omSiteSrefFormulas =
         * omSiteSrefFormulas; this.omMsaConsFrs = omMsaConsFrs; this.omMsaConsStsubtFrs = omMsaConsStsubtFrs;
         */
    }

    @Column(allowsNull = "false", name = "sourcetype_id")
    @Persistent(primaryKey = "true", valueStrategy = IdGeneratorStrategy.SEQUENCE, sequence = "sourcetype_id")
    public Long getSourcetypeId() {
        return this.sourcetypeId;
    }

    public void setSourcetypeId(Long sourcetypeId) {
        this.sourcetypeId = sourcetypeId;
    }

    @Column(allowsNull = "false", name = "type_code")
    @Title
    public String getTypeCode() {
        return this.typeCode;
    }

    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }

    @Column(allowsNull = "false", name = "display_name")
    public String getDisplayName() {
        return this.displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    @Column(name = "description")
    @Optional
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(allowsNull = "false", name = "inserted_by")
    public String getInsertedBy() {
        return this.insertedBy;
    }

    public void setInsertedBy(String insertedBy) {
        this.insertedBy = insertedBy;
    }

    @Column(allowsNull = "false", name = "inserted_time_ts")
    public Date getInsertedTimeTs() {
        return this.insertedTimeTs;
    }

    public void setInsertedTimeTs(Date insertedTimeTs) {
        this.insertedTimeTs = insertedTimeTs;
    }

    @Column(name = "source_id_")
    @Optional
    public Long getSourceId() {
        return this.sourceId;
    }

    public void setSourceId(Long sourceId) {
        this.sourceId = sourceId;
    }

    @Column(name = "config_user")
    @Hidden(where = Where.EVERYWHERE)
    public String getConfigUser() {
        return configUser;
    }

    public void setConfigUser(String configUser) {
        this.configUser = configUser;
    }
    /*
     * public Set getOmMsaConsStFrs() { return this.omMsaConsStFrs; } public void setOmMsaConsStFrs(Set omMsaConsStFrs)
     * { this.omMsaConsStFrs = omMsaConsStFrs; } public Set getOmSourceidentities() { return this.omSourceidentities; }
     * public void setOmSourceidentities(Set omSourceidentities) { this.omSourceidentities = omSourceidentities; }
     * public Set getOmSiteSrefFormulas() { return this.omSiteSrefFormulas; } public void setOmSiteSrefFormulas(Set
     * omSiteSrefFormulas) { this.omSiteSrefFormulas = omSiteSrefFormulas; } public Set getOmMsaConsFrs() { return
     * this.omMsaConsFrs; } public void setOmMsaConsFrs(Set omMsaConsFrs) { this.omMsaConsFrs = omMsaConsFrs; } public
     * Set getOmMsaConsStsubtFrs() { return this.omMsaConsStsubtFrs; } public void setOmMsaConsStsubtFrs(Set
     * omMsaConsStsubtFrs) { this.omMsaConsStsubtFrs = omMsaConsStsubtFrs; }
     */
    @Persistent(mappedBy = "MSourcetypeConfig", dependentElement = "true")
    public Set<OmOrgSrefName> getOmOrgSrefNames() {
        return this.omOrgSrefNames;
    }

    public void setOmOrgSrefNames(Set<OmOrgSrefName> omOrgSrefNames) {
        this.omOrgSrefNames = omOrgSrefNames;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((sourcetypeId == null) ? 0 : sourcetypeId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MSourcetypeConfig other = (MSourcetypeConfig) obj;
        if (sourcetypeId == null) {
            if (other.sourcetypeId != null)
                return false;
        } else if (!sourcetypeId.equals(other.sourcetypeId))
            return false;
        return true;
    }

    @Override
    public int compareTo(MSourcetypeConfig other) {
        return ObjectContracts.compare(this, other, "typeCode");
    }

    @Bulk
    @CssClass("x-caution")
    public List<MSourcetypeConfig> delete() {
        container.removeIfNotAlready(this);
        container.informUser("Deleted " + container.titleOf(this));
        // invalid to return 'this' (cannot render a deleted object)

        return mSourcetypeConfigs.listAll();
    }
    
    public void jdoPostLoad() {
    }

    public void jdoPreClear() {
    }

    public void jdoPreStore() {
        this.setConfigUser(this.container.getUser().getName());
    }

    public void jdoPreDelete() {
    }

}
